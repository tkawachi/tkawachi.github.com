<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2014-11-14T00:39:28+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Try はモナドじゃない]]></title>
    <link href="http://tkawachi.github.io/blog/2013/11/24/try-is-not-monad/"/>
    <updated>2013-11-24T21:19:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/11/24/try-is-not-monad</id>
    <content type="html"><![CDATA[<p><a href="https://www.coursera.org/course/reactive">Principles of Reactive Programming</a>
最初週の講義で言ってたこと。
忘れそうなのでメモ。</p>

<!-- more -->


<p>モナドであるためにはモナド則を満たさねばならない。
モナド則は以下の３つ。</p>

<ul>
<li>Associativity: <code>(m flatMap f) flatMap g == m flatMap (x =&gt; f(x) flatMap g)</code></li>
<li>Left unit: <code>unit(x) flatMap f == f(x)</code></li>
<li>Right unit: <code>m flatMap unit == m</code></li>
</ul>


<p>ちなみにすごいHaskell本でモナド則は次のように書かれている。</p>

<ul>
<li>結合法則: <code>(m &gt;&gt;= f) &gt;&gt;= g</code> と <code>m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</code> が等価</li>
<li>左恒等性: <code>return x &gt;&gt;= f</code> と <code>f x</code> が等価</li>
<li>右恒等性: <code>m &gt;&gt;= return</code> と <code>m</code> が等価</li>
</ul>


<p><code>flatMap</code> を <code>&gt;&gt;=</code> に、 <code>unit</code> を <code>return</code> に読みかえれば同じ。
同じモナド則の説明なので当たり前といえば、当たり前だけど。
覚えるのが大変だから名前は揃えて欲しかったなあ、とは思う。
<code>&gt;&gt;=</code> は bind と読むらしいので、 flatMap は bind、 return は unit。</p>

<p>で、Scala の Try がモナドじゃないというのは、Left unit (左恒等性) を満たさないから。
任意の <code>f</code> と <code>expr</code> において、<code>Try(expr) flatMap f</code> が <code>f(expr)</code> と等しければ、
left unit が満たされていると言える。
しかし、<code>f</code> または <code>expr</code> が例外を投げた時にこれらが等しくならない。
<code>Try(expr) flatMap f</code> では(fatal 以外の)例外が発生することはなく <code>Failure</code> 型の
戻り値になるのに対し、<code>f(expr)</code> は例外が発生する。
よって Try はモナドではない。</p>

<p>ああ、残念。Try はモナドでは無かったか。</p>

<p>でも、 left unit を満たしてなくても <code>for</code> 式では便利に使えるからいいんだよ。
と Odersky 先生はおっしゃっておられた。</p>

<p>正直なところ、モナド則を満たしているとどれだけ嬉しいのかよくわかってない。
for comprehension で便利に使えればそれでいいじゃん、くらいの低い認識しかない。
実際このコースの３週目の講義を聞いているところだが、「Try は正確にはモナドじゃないけど、
モナドみたいなもんだから、これ以降モナドって呼ぶね」ということになっている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Framework 2.2 Scala 最初の1週間で困った雑多なこと]]></title>
    <link href="http://tkawachi.github.io/blog/2013/11/23/starting-play/"/>
    <updated>2013-11-23T21:40:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/11/23/starting-play</id>
    <content type="html"><![CDATA[<p>Play Framework 2.2.1 + Scala を触り始めて一週間くらいたった。
触りながら困った点（というか「疑問に思った」程度のものが多いが）をメモしていたので晒しておく。
雑なメモで無知を晒すのは恥ずかしいが、同じことではまる人がいるかもしれないもんね。</p>

<p>間違っているところがあったらコメントで教えてもらえると大変嬉しいです。</p>

<!-- more -->


<h2>Play 関連</h2>

<h3>Q: app/assets/ と public/ の違いは？</h3>

<p>A: app/assets は CoffeeScript, LESS など preprocess するもの。public はしないもの。</p>

<h3>Q: bindFromRequest すると Cannot find any HTTP Request here って出るよ。</h3>

<p>A: Action の先頭に <code>implicit request =&gt;</code> を付ける。
<code>Action { implicit request =&gt; ... }</code></p>

<p>Action.apply() がオーバーロードされてて、引数が call by name のもの関数のものがある。</p>

<pre><code>def apply(block: =&gt; Result)
def apply(block: Request =&gt; Result)
</code></pre>

<p><code>implicit request =&gt;</code> を付けたときは引数が関数の方。
request は implicit parameter。</p>

<h3>Q: なぜ Cannot find any HTTP Request here というエラーが出るの？</h3>

<p>A: <code>scala.annotation.implicitNotFound</code> で annotation されているから。</p>

<h3>Q: bindFromRequest がエラーの時、どうやってエラー表示する？</h3>

<p>A: <code>Form#fold</code> を使う</p>

<h3>Q: view 内で import したい</h3>

<p>A: <code>@import some.package.MyClass</code>
view の先頭（かつ、パラメータの後！）でしか import 出来ないので注意。</p>

<h3>Q: view 先頭にあるパラメータの型指定で、@import したクラスが使えない</h3>

<p>A: どうやらそういうものらしい。パッケージ名フル修飾で書く。</p>

<h3>Q: @helper.inputText() 等で出力される input tag に属性を付けたい（class とか）</h3>

<p>A: Symbol -> Any のタプルをずらずらと渡す。</p>

<pre><code>@helper.inputText(userForm("name"), 'id -&gt; "name", 'size -&gt; 30)
</code></pre>

<h3>Q: @helper.inputText() 等で出力される input tag に紐づく label tag の名前を変えたい。</h3>

<p>A: &lsquo;_label -> &ldquo;ほげ&rdquo; を追加する。</p>

<pre><code>@helper.inputText(userForm("name"), '_label -&gt; "ほげ")
</code></pre>

<p><code>_label</code> 以外の特別なキーはここ。</p>

<p><a href="http://www.playframework.com/documentation/2.2.x/ScalaCustomFieldConstructors">http://www.playframework.com/documentation/2.2.x/ScalaCustomFieldConstructors</a></p>

<h3>Q: submit ボタン表示はどうするんだっけ？</h3>

<p>A:</p>

<pre><code>@helper.form(...) {
  ...
  &lt;button type="submit"&gt;&lt;/button&gt; // ←ここに直接書く。
}
</code></pre>

<h3>Q: Form の required という表示を消したい。<code>&lt;dd class="info"&gt;Required&lt;/dd&gt;</code>←これ</h3>

<p>A: <code>'_showConstraints -&gt; false</code> を <code>@helper.inputFoo()</code> に渡す。</p>

<h3>Q: war にできる？</h3>

<p>A: war にできないぽい。
<a href="http://stackoverflow.com/questions/14985783/deploy-play-as-a-war-file-into-a-servlet-container-even-if-it-uses-jpa-heavily">http://stackoverflow.com/questions/14985783/deploy-play-as-a-war-file-into-a-servlet-container-even-if-it-uses-jpa-heavily</a></p>

<h3>Q: deploy は?</h3>

<p>A: play dist で zip にして展開するのが良さそう</p>

<h3>Q: Controller action の URL を得るには？</h3>

<p>A: <code>routes.MyController.action(arg)</code></p>

<p><a href="http://www.playframework.com/documentation/2.2.x/ScalaRouting">http://www.playframework.com/documentation/2.2.x/ScalaRouting</a></p>

<h3>Q: Log の出し方は？</h3>

<p>A: <code>play.api.Logger.info()</code> など。</p>

<h2>SecureSocial 関連</h2>

<h3>Q: ユーザ登録まわりはモジュールある？ Rails の devise みたいな。</h3>

<p>A: SecureSocial か play2-auth</p>

<ul>
<li><a href="http://securesocial.ws/">http://securesocial.ws/</a></li>
<li><a href="https://github.com/t2v/play2-auth">https://github.com/t2v/play2-auth</a></li>
</ul>


<h3>Q: SecureSocial で SES からメール送れる？</h3>

<p>A: SES の smtp interface で送れる。</p>

<h3>Q: SecureSocail のコントローラの path を view から逆引きするのはどうしたらいいのか?</h3>

<p>A: <code>securesocial.core.providers.utils.RoutesHelper.login()</code> とか</p>

<h3>Q: SecureSocial で提供されるページとメールは国際化できるか？</h3>

<p>A: <a href="http://securesocial.ws/guide/views-customization.html">http://securesocial.ws/guide/views-customization.html</a> の手順でできそう。</p>

<h3>Q: メールアドレスとパスワードで登録したユーザと、Google認証のユーザが別ユーザになる。</h3>

<p>統合する方法は用意されているか？
A: 用意されていない。</p>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/securesocial/at-qCKXvsE0">https://groups.google.com/forum/#!topic/securesocial/at-qCKXvsE0</a></li>
<li><a href="https://github.com/jaliss/securesocial/issues/14">https://github.com/jaliss/securesocial/issues/14</a></li>
</ul>


<h2>DB 関連</h2>

<h3>Q: evolution で manual rollback するには?</h3>

<p>A: できない!</p>

<p><a href="http://stackoverflow.com/questions/10069217/rolling-an-evolution-back">http://stackoverflow.com/questions/10069217/rolling-an-evolution-back</a></p>

<h3>Q: play-slick 使った時に migration 管理は含まれているのか？</h3>

<p>A: evolutions の 1.sql を吐き出してくれる機能はある。</p>

<h3>Q: slick の for で foreach メソッドが無いとか言われる</h3>

<p>A: <code>import scala.slick.driver.MySQLDriver.simple._</code>
したら通った。どういうこと..</p>

<h3>Q: Slick で JodaTime の DateTime 使いたい。</h3>

<p>A: <a href="https://github.com/tototoshi/slick-joda-mapper">https://github.com/tototoshi/slick-joda-mapper</a></p>

<h3>Q: Slick で DateTime の大小比較はどうする？</h3>

<p>A: &lt; でいいっぽい。
<code>import com.github.tototoshi.slick.JodaSupport._</code>が必要。</p>

<h3>Q: DateTime 比較時にこんなエラーが起きる</h3>

<pre><code>com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ':26:48.548+09:00' at line 1
</code></pre>

<p>A: slick-joda-mapper が古かった(0.1.0だった)。0.4.0 にあげたら解消した。</p>

<h3>Q: Slick で発行されている SQL を表示するには?</h3>

<p>A: <a href="http://stackoverflow.com/questions/14840010/how-do-you-print-the-select-statements-for-the-following-slick-queries">http://stackoverflow.com/questions/14840010/how-do-you-print-the-select-statements-for-the-following-slick-queries</a> によるとできない。</p>

<h3>Q: Slick から value filter is not a member of models.MyModel といわれる。</h3>

<p>A: <code>Query()</code> でくるむといい。</p>

<h3>Q: play test すると Attempting to obtain a connection from a pool that has already been shutdown. と出る。</h3>

<p>A:  <a href="http://d.hatena.ne.jp/tototoshi/20130329/1364484806">http://d.hatena.ne.jp/tototoshi/20130329/1364484806</a></p>

<pre><code>FakeApplication(
  additionalConfiguration =
    inMemoryDatabase(name = "default", options = Map("DB_CLOSE_DELAY" -&gt; "-1"))
)
</code></pre>

<h3>Q: <code>new WithBrowser(app = dbApp)</code> （dbApp は DB_CLOSE_DELAY 指定した FakeApplication）でエラーになる</h3>

<p>A: 第一引き数 webDriver も指定したらエラーでなくなった。（初期化順の問題？）</p>

<pre><code>new WithBrowser(webDriver = Helpers.HTMLUNIT, app = dbApp) 
</code></pre>

<h3>Q: Play で環境によって設定を変える仕組みが用意されているか？</h3>

<p>A: <code>-Dconfig.file</code> で設定ファイルを切り替える</p>

<h3>Q: play-flyway で本番系 migration はどうやるの?</h3>

<p>A: <code>-Ddb.default.migration.auto=true</code></p>

<p>最初まちがって <code>-Ddb.default.migration.initOnMigrate=true</code> を指定して悩んでた。</p>

<h3>Q: Play で gzip を有効化できるか？</h3>

<p>A: GzipFilter でできるっぽい。</p>

<p><a href="http://www.playframework.com/documentation/2.2.x/GzipEncoding">http://www.playframework.com/documentation/2.2.x/GzipEncoding</a></p>

<p>appDependencies に filters を追加する必要あり。</p>

<h3>Q: Slick で MySQL に接続したら文字化けした</h3>

<p>A:  character_set_client, character_set_server が utf8mb4 になっていることを
確認する。</p>

<p>サーバとクライアントのネゴシエーションで決まる。
Slick での character_set_client, character_set_server の確認方法。</p>

<pre><code>import scala.slick.session.Database
import Database.threadLocalSession
import scala.slick.jdbc.{GetResult, StaticQuery =&gt; Q}

val jdbcUrl = "jdbc:mysql://localhost:3306/my_db?user=myUser&amp;password=myPassword"
Database.forURL(jdbcUrl, driver = "com.mysql.jdbc.Driver") withSession {
  val q = "SHOW VARIABLES LIKE 'char%'"
  Q.queryNA[(String, String)](q).foreach(println)
}
</code></pre>

<p>サーバの設定で character_set_server を utf8mb4 に設定し、 JDBC には
characterEncoding=utf8mb4 をつけないのが正解ぽい。
JDBC URL に characterEncoding=utf8mb4 をつけると、例外がおきるので注意。</p>

<h3>Q: Play + Slick で driver に応じて、処理を変えたい。</h3>

<p>A: こんな感じ。</p>

<pre><code>import play.api.db.slick.DB
import scala.slick.driver.MySQLDriver
if (DB("default").driver == MySQLDriver) {...}
</code></pre>

<h3>Q: MySQL 用に CREATE TABLE に CHARACTER SET 指定をしたいが、テストの H2 でエラー。</h3>

<p>A: <code>/*! */</code> でくくると良い。</p>

<p><a href="http://stackoverflow.com/questions/15885814/use-mysql-in-dev-prod-and-h2-in-test">http://stackoverflow.com/questions/15885814/use-mysql-in-dev-prod-and-h2-in-test</a></p>

<p><code>/*! CHARACTER SET utf8mb4 */;</code>
をつけておくと MySQL でだけ処理され、H2では処理されない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play framework 2.2.1 scala でユーザ登録]]></title>
    <link href="http://tkawachi.github.io/blog/2013/11/17/play-2-dot-2-scala-user-login/"/>
    <updated>2013-11-17T18:36:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/11/17/play-2-dot-2-scala-user-login</id>
    <content type="html"><![CDATA[<p>Play framework 2.x を触り始めていて、まず最初にユーザ登録とログインを
扱いたいと思った。
Rails であれば devise で、というところだが、Play ではどうなっているのだろう？</p>

<p>Sample としてついてくる zentask や、
「play scala ユーザ登録」でググって上の方に出てくる
<a href="http://akiomik.hatenablog.jp/entry/2013/02/07/211054">ペ</a>
<a href="http://how-to-use-playframework-20.readthedocs.org/en/latest/subdocs/initial_create_application.html">ー</a>
<a href="http://d.hatena.ne.jp/sy-2010/20110517/1305650450">ジ</a>
を見ると、いずれもパスワードを生で保存している。</p>

<p>パスワードは生で保存していると何かの拍子に痛い目に合うので、真似したくない。
きっと Rails の devise みたいに再利用できるコンポーネントがあるだろうから、
それを使いたい。</p>

<p>Google+ のコミュニティで訪ねてみたところ<a href="http://securesocial.ws/">SecureSocial</a> と
<a href="https://github.com/t2v/play2-auth">play2-auth</a>
を教えてもらった。
SecureSocial を試してみる。</p>

<!-- more -->


<p>Play は 2.2.1, Scala でやる。</p>

<p>プロジェクト作成。アプリ名はログインしたいだけだから <code>just-login</code> にする。</p>

<pre><code>$ play new just-login
</code></pre>

<p><a href="http://securesocial.ws/guide/installation.html">http://securesocial.ws/guide/installation.html</a> に従って進めていく。</p>

<p>project/Build.scala を追加。</p>

<pre><code>import sbt._
import Keys._

object ApplicationBuild extends Build {
    val appName         = "just-login"
    val appVersion      = "1.0-SNAPSHOT"

    val appDependencies = Seq(
        "securesocial" %% "securesocial" % "2.1.2"
    )
    val main = play.Project(appName, appVersion, appDependencies).settings(
        resolvers += Resolver.url("sbt-plugin-releases", new URL("http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/"))(Resolver.ivyStylePatterns)
    )
}
</code></pre>

<p>重複した情報になるので、 build.sbt からは <code>name</code> と <code>version</code> を削除した。</p>

<p>conf/route にルーティング追加。それっぽいエンドポイントが一式備わってて、それっぽい感じ。</p>

<pre><code># Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling 
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized
</code></pre>

<p>次に <code>conf/play.plugins</code> を作成し、以下の内容を記述。
ユーザ名とパスワードでログインしたいだけなので、
Twitter やら Facebook やらでログインするためのプラグインはざっくり削る。</p>

<pre><code>1500:com.typesafe.plugin.CommonsMailerPlugin
9994:securesocial.core.DefaultAuthenticatorStore
9995:securesocial.core.DefaultIdGenerator
9996:securesocial.core.providers.utils.DefaultPasswordValidator
9997:securesocial.controllers.DefaultTemplatesPlugin
9998:service.UserServiceImpl
9999:securesocial.core.providers.utils.BCryptPasswordHasher
10004:securesocial.core.providers.UsernamePasswordProvider
</code></pre>

<p><code>9998:service.UserServiceImpl</code> の行に書いた <code>service.UserServiceImpl</code> は
自分の環境に合わせて実装する必要がある。</p>

<p><a href="https://github.com/jaliss/securesocial/blob/master/samples/scala/demo/app/service/InMemoryUserService.scala">InMemoryUserService.scala</a>
の内容をコピってきて、パッケージ名を <code>service</code> に、クラス名を <code>UserServiceImpl</code> に
変えて、 <code>app/service/UserServiceImpl.scala</code> として保存する。</p>

<p><a href="http://securesocial.ws/guide/configuration.html">http://securesocial.ws/guide/configuration.html</a> にのっとって
<code>conf/application.conf</code> に <code>smtp</code> の設定と、 <code>include "securesocial.conf"</code> を書く。
<code>conf/securesocial.conf</code> は <code>Sample configuration</code> の内容を書く。
<code>assetsController=controllers.ReverseMyCustomAssetsController</code> は
Asset のコントローラを自前で作っているときだけ必要ぽいので、コメントアウトする。</p>

<p><a href="https://github.com/typesafehub/play-plugins/blob/master/mailer/src/main/scala/com/typesafe/plugin/MailerPlugin.scala">MailerPlugin のソース</a>
を眺めるとわかるように <code>smtp.mock = true</code> を設定しておけば実際のメールは送信されず、
コンソールにメールの内容が出力される。</p>

<pre><code>smtp {
    ... 他の設定
    mock = true
}
</code></pre>

<p>ここまでで、ユーザ登録とログイン、ログアウト、パスワード忘れが実現できた。
パスワードが生で保存されることはなく、<code>BCryptPasswordHasher</code> によって生成された hash が格納される。</p>

<p>UserService はメモリ上じゃなく、DBへ格納するように実装することになる。
その際は
<a href="https://github.com/jaliss/securesocial/pull/163/files">https://github.com/jaliss/securesocial/pull/163/files</a>
のコードが参考になりそうだった。</p>

<h2>まとめ</h2>

<ul>
<li><a href="http://securesocial.ws/">SecureSocial</a> を使えば Play 2.2 + scala でユーザ登録・ログイン・パスワード忘れが簡単に実現できる</li>
<li>Rails の devise のように DB の schema は出してくれないので、比べると少し面倒かな&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scala の for]]></title>
    <link href="http://tkawachi.github.io/blog/2013/10/14/scala-for/"/>
    <updated>2013-10-14T11:35:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/10/14/scala-for</id>
    <content type="html"><![CDATA[<p>C や Java と同じように Scala にも for がある。</p>

<p>昔の Java におけるfor 文は、C と同じように <code>for (初期化; 継続条件; カウンタ更新)</code> という形しかなかった。
Java 5.0 で導入された拡張for文（<code>for (型 変数: コレクション)</code>の形）では <code>java.lang.Iterable</code> を実装したオブジェクトならなんでも繰り返しができるようになった。
便利になったなあと思ったのを覚えてる（2004年の話）。</p>

<h2>文法</h2>

<p>Scala で C の for 的なものをやろうとすると</p>

<pre><code>// C では
for (int i = 0; i &lt; 10; i++) { … }
// Scala では
for (i &lt;- 0 until 10) { … }
</code></pre>

<p>となるので「 <code>for (i &lt;- 初期値 until 上限)</code> という固定形なんだー」と最初は思ったのだが、そうではなく <code>for (i &lt;- 初期値.until(上限))</code> であり <code>for (i &lt;- obj)</code> が for 式のパターンである。
ここで<code>初期値.until(上限)</code> は <code>Range</code> 型の値を返す。</p>

<!-- more -->


<p>Scala の言語仕様によると for 式は以下の文法をもつ。</p>

<pre><code>Expr1 ::= ‘for’ (‘(’ Enumerators ‘)’ | ‘{’ Enumerators ‘}’) {nl} [‘yield’] Expr
Enumerators ::= Generator {semi Enumerator}
Enumerator ::= Generator
                | Guard
                | ‘val’ Pattern1 ‘=’ Expr
Generator ::= Pattern1 ‘&lt;-’ Expr [Guard]
Guard ::= ‘if’ PostfixExpr
</code></pre>

<p><code>Enumerator</code> の最後のパターンで <code>‘val’ Pattern1 ‘=’ Expr</code> とあるが、この val は deprecated になったようだ。
（Scala の言語仕様は更新が追いついていないらしく、現時点の最新（2.10.3）の言語仕様書は現時点で存在しない。）</p>

<h2>for式関連メソッド</h2>

<p>Scala の for 式は <code>foreach()</code>, <code>map()</code>, <code>flapMap()</code>, <code>withFilter()</code> が実装されていればなんでも回せる。
全てが必要なわけではなく、用いられるパターンによって必要なメソッドが決まる。</p>

<p><code>foreach()</code> が必要なパターン。 <code>yield</code> なしの時。</p>

<pre><code>for (i &lt;- obj) { … }
// 書き換えると
obj.foreach { case i =&gt; … }
</code></pre>

<p><code>map()</code> が必要なパターン。
Generator がひとつだけで <code>yield</code> で値を返す時。</p>

<pre><code>for (i &lt;- obj) yield { … }
// 書き換えると
obj.map { case i =&gt; … }
</code></pre>

<p><code>flatMap()</code> が必要なパターン。
Generator が複数あり、<code>yield</code> で値を返す時。</p>

<pre><code>for (i &lt;- obj1; j &lt;- obj2) yield { … }
// 書き換えると
obj1.flatMap { case i =&gt; for (j &lt;- obj2) yield { … } }
// obj1 には flatMap が必要。obj2 には map が必要。
</code></pre>

<p><code>withFilter()</code> が必要なパターン。
Guard があるとき。</p>

<pre><code>for (i &lt;- obj1 if i &lt; 0) { … }
// 書き換えると
obj1.withFilter(i =&gt; i &lt; 0).foreach { case i =&gt; … }
</code></pre>

<p>こんな感じで書き換えできるので、本質的には for 式要らないんだと思う。
でも複数の generator を回す時とか、<code>foreach</code> や <code>map</code>, <code>flatMap</code> で書くとネストが深くなってしまうので、for文だとスッキリかけて嬉しいってのはある。</p>

<h2>繰り返し以外の文脈</h2>

<p>必要なメソッドさえ揃っていればいいので、繰り返し以外の文脈で用いることができる。</p>

<p>たとえば <code>scala.Option</code> はオプショナルな値を表す。
値があるかもしれないし無いかもしれないという文脈であり、Javaでいえば null を使いたく場面で使う型である。
<code>Option</code> では for 式に関連するメソッドが、値がある時には関数を実行し、そうでなければ何もせず値なしを結果とするという意味合いで定義されている。</p>

<pre><code>for (i &lt;- Some(1); j &lt;- Some(2)) yield i + j // Some(3)
for (i &lt;- Some(1); j &lt;- None) yield i + j    // None
</code></pre>

<p>上記のように「<code>Option</code> 型の値がいくつかあり、全ての値が存在している時に何かする」というのが for 文で実現できる。</p>

<p>他にも <code>scala.concurrent.Future</code> は将来的に得られる値を表現する型で、
for式関連のメソッドは値が得られた時に関数を実行するように定義されている。</p>

<pre><code>val f1: Future[Int] = …
val f2: Future[Int] = …
val f3: Future[Int] = for (v1 &lt;- f1; v2 &lt;- f2) yield v1 + v2
</code></pre>

<p>ここでは <code>f1</code>, <code>f2</code> の値が将来得られたら <code>v1 + v2</code> を計算するという、コールバックの登録的な意味合いを持っている。</p>

<p><a href="https://github.com/jsuereth/scala-arm">scala-arm</a> では、最後にリソースを開放するという意味合いを for 式関連メソッドに持たせることで、for 式の最後でのリソース解放を実現している。</p>

<h2>まとめ</h2>

<p><code>foreach</code>, <code>map</code>, <code>flatMap</code>, <code>withFilter</code> というメソッドの定義次第で for 式の使い道は無限大。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Covariantとcontravariant]]></title>
    <link href="http://tkawachi.github.io/blog/2013/10/09/covariant-contravariant/"/>
    <updated>2013-10-09T23:06:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/10/09/covariant-contravariant</id>
    <content type="html"><![CDATA[<p>今日 <a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a> で聞いた話が難しかったのでメモ。</p>

<!-- more -->


<h2>Subtype</h2>

<p>書き方として A &lt;: B と書けば A は B の subtype であることを示す。
A >: B と書けば A は B の supertype、言い換えれば B は A の subtype であることを示す。</p>

<p>Subtype とは何か？というのは Liskov substitution principle というので定義されている。
「A &lt;: B であれば、B型の値に対して出来ることならなんでもA型の値に対して出来る」ということらしい。</p>

<p>クラス階層で言えば、 A &lt;: B というのは A が B の subclass または A == B ってこと。</p>

<p>Subtype の概念はクラス階層にとどまらない。
こんな型が定義されていたら、</p>

<pre><code>class Base
class Derived extends Base
type A = Base =&gt; Derived
type B = Derived =&gt; Base
</code></pre>

<p>A と B の間にクラス階層はないが、B がおける場所には A もおける。
つまり A &lt;: B。
なぜなら</p>

<ul>
<li>B の引き数は Derived で A の引数は Base なので、B の引き数ならなんでも A の引き数として使える</li>
<li>B の戻り値は Base で A の戻り値は Derived なので、A の戻り値ならなんでも B の戻り値として使える</li>
</ul>


<p>から。</p>

<p>関数の場合は一般に A2 &lt;: A1 かつ B1 &lt;: B2 のときに (A1 => B1) &lt;: (A2 => B2) が成り立つ。
理由は上と同じ。</p>

<h2>Variant</h2>

<p>C[T]がパラメータ化された型で A, B が A &lt;: B であるとき、C[A] と C[B] の関係は3パターン。</p>

<ul>
<li>C[A] &lt;: C[B] &ndash; このとき C は covariant（共変）</li>
<li>C[A] >: C[B] &ndash; このとき C は contravarinat（反変）</li>
<li>C[A] と C[B] の間に subtype の関係なし &ndash; このとき C は invariant（不変）。nonvariant とも言うらしい。</li>
</ul>


<p>Scala ではタイプパラメタの前に <code>+</code> とか <code>-</code> とかつけて covariant や contravariant を表現する。何も付けなかったら invariant ね。</p>

<pre><code>class C[+A] // C は covariant
class C[-A] // C は contravariant
class C[A]  // C は invariant
</code></pre>

<p>Function object は covariant, contravariant を使ってる。</p>

<pre><code>trait Function1[-T, +U] {
    def apply(x: T): U
}
</code></pre>

<p><code>A =&gt; B</code> は <code>Function[A, B]</code> と同じ。
で、<code>Function1</code> の T は contravariant, U は invariant ということなので、</p>

<pre><code>class A1
class A2 extends A1
class A3 extends A2
</code></pre>

<p>とあったときに <code>A2 =&gt; A2</code> 型の値は <code>A3 =&gt; A1</code> 型が求められるところならどこでも使える。</p>

<h3>Java の配列</h3>

<p>Java の配列は covariant。</p>

<pre><code>class Base {…}
class Derived1 extends Base {…}
class Derived2 extends Base {…}
</code></pre>

<p>が定義されていてると以下の様なことができる。</p>

<pre><code>Derived1[] a = new Derived1[]{ new Derived1() }
Base[] b = a
b[0] = new Derived2()
Derived1 s = a[0]
</code></pre>

<p>1行目は普通。</p>

<p>2行目は super class である <code>Base</code> の配列に代入しようとしている。
<code>a</code> には <code>Base[]</code> 型がきて欲しいが、Java の配列は covariant なので <code>Base[]</code> が来れる場所には <code>Derived1[]</code> が来ても良い。
なので2行目も通る。</p>

<p>3行目では <code>b[0]</code> に値を代入している。
<code>b[0]</code> の型は <code>Base</code>。
<code>Derived2</code> は <code>Base</code> の subclass なので問題ない。</p>

<p>4行目では <code>Derived1</code> 型の <code>a[0]</code> を別の <code>Derived1</code> 型の変数に代入している。
これも問題無さそう。</p>

<p>という訳でコンパイルは通る。
でも <code>a</code> と <code>b</code> は同じ配列を指していて、3行目で <code>Derived2</code> 型の値に入れ替えてる。
だから <code>a[0]</code> （と<code>b[0]</code>）には <code>Derived2</code> 型の値が入っているはず。
4行目ではそれを <code>Derived1</code> 型の値に代入している。
なにかおかしい。</p>

<p>Javaではコンパイルエラーにはならず、3行目実行時に ArrayStoreException が投げられる。
残念。</p>

<h2>Scala の variance check</h2>

<p>Java の（問題含みの）配列を scala 的に表現すると</p>

<pre><code>class Array[+T] {
    def update(x: T)
}
</code></pre>

<p>となる。
問題は covariant な型パラメータ T がメソッドの引数になっていること。</p>

<p>Scala のコンパイラはこの問題を防ぐために variant check というものを行う。
いろいろ細かいルールはあるそうだが、大まかには以下のとおり。</p>

<ul>
<li>covariant な型パラメータはメソッドの戻り値にしか使っちゃダメ</li>
<li>contravariant な型パラメータはメソッドのパラメタにしか使っちゃダメ</li>
<li>invariant な型パラメータはどこに使ってもいい</li>
</ul>


<p>Function1 を見なおしてみるとルールに合致していることが確認できる。</p>

<pre><code>trait Function1[-T, +U] {
    def apply(x: T): U
}
</code></pre>

<p>contravariant な T はパラメタにきており、covariant な U は戻り値にきている。
問題なし。</p>

<p>Scala では immutable な collection は covariant, mutable な collection は invariant になっているらしい。
きっと Java の例にあるような実行時エラーをコンパイル時に捕まえるにはそうするしか無いんだろうな。</p>

<h2>List を covariant にする話</h2>

<pre><code>trait List[+T] {…}
object Nil extends List[Nothing] {…}
class Cons[T] extends List[T] {…}
</code></pre>

<p>みたいな感じ。</p>

<p><code>Nil</code> のときの <code>T</code> は <code>Nothing</code>。
<code>Nothing</code> は全ての型の subtype（<code>Nothing</code> &lt;: なんでも）。
List は covariant なので <code>List[Nothing]</code> &lt;: <code>List[なんでも]</code> となる。
どの <code>T</code> の <code>List[T]</code> に対しても <code>Nil</code> を使えるので便利。</p>

<p>リストの先頭に要素を追加する <code>prepend</code> メソッドを定義したい。</p>

<pre><code>trait List[+T] {
    def prepend(elem: T): List[T] = new Cons(elem, this)
}
</code></pre>

<p>一見これで良さそうだが、
<code>error: covariant type T occurs in contravariant position in type T of value elem</code>
というコンパイルエラーになる。
Variance check が活躍してる。
たしかに covariant な型パラメータは戻り値にしか使っちゃいけなかったんだ。</p>

<p>正しい定義はこうなる。</p>

<pre><code>trait List[+T] {
    def prepend[U &gt;: T](elem: U): List[U] = new Cons(elem, this)
}
</code></pre>

<p>これは variance check を通る。U は contravariant で引き数のところに使われているから。
戻り値型は <code>List[U]</code> だが U そのものじゃないので contravariant 扱いじゃないんだろう。</p>

<pre><code>class Base
class Derived1 extends Base
class Derived2 extends Base
def f(xs: List[Derived1], x: Derived2) = xs.prepend(x)
</code></pre>

<p>さてこのとき <code>f()</code> の戻り値型はなんだろうか？
<code>prepend()</code> の戻り値なので <code>List[U]</code> 型になるはず。
<code>xs</code> が <code>List[Derived1]</code> 型なので <code>T</code> は <code>Derived1</code> で決まり。</p>

<p><code>U</code>を決めるのに型推論が活躍する。
<code>U</code> は <code>x</code> の型なので <code>Derived2</code> だろうか？
しかし  <code>Derived2</code> だとすると <code>U &gt;: T</code> が満たせない（<code>Derived2</code> は <code>Derived1</code> の supertype ではない）。
というわけで型推論さんは、<code>Derived2</code> と <code>Derived1</code> の共通の親である <code>Base</code> が <code>U</code> だと結論付ける。
したがって <code>f()</code> の戻り値型は <code>List[Base]</code> ということになる。</p>
]]></content>
  </entry>
  
</feed>
