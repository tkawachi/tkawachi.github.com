<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haxe | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/haxe/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2013-12-22T13:16:45+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haxe で call-by-name したい]]></title>
    <link href="http://tkawachi.github.io/blog/2013/11/01/haxe-call-by-name/"/>
    <updated>2013-11-01T19:18:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/11/01/haxe-call-by-name</id>
    <content type="html"><![CDATA[<p>先日 Haxe で Option 関連の関数を定義した時、 <code>getOrElse()</code> は次のような定義にしていた。</p>

<pre><code>public static function getOrElse&lt;A&gt;(opt: Option&lt;A&gt;, els: A) {
  return switch (opt) {
  case Some(v): v;
  case None: els;
  }
}
</code></pre>

<p>scala.Option の <code>getOrElse()</code> ぽく使いたかったのだが、実際に使ってみるとなんか違う。</p>

<pre><code>opt.getOrElse(sideEffectFunction());
</code></pre>

<p>上で <code>sideEffectFunction()</code> は何らかの副作用をもつ関数だ。
Scala の場合、 <code>opt</code> に値が入っていた場合には <code>sideEffectFunction()</code> は評価されない。
副作用も発生しない。
上で定義した Haxe 用 <code>getOrElse()</code> では <code>opt</code> の内容によらず <code>sideEffectFunction()</code> が評価され、副作用が発生する。</p>

<p>関数を呼び出すときには、まず引数を評価してから関数の実行に移るので、当たり前といえば当たり前だった。</p>

<!-- more -->


<p>Scala には call-by-name が言語上用意されているおり、
scala.Option の <code>getOrElse()</code> はこれを利用している。
型を確認すると <code>final def getOrElse[B &gt;: A](default: ⇒ B): B</code> となっている。
<code>⇒ B</code> が引数の型だが <code>⇒</code> を付けることにより、関数呼び出し前には評価されず、関数内で <code>default</code> を参照したところで評価されるようになっている(call-by-name)。
なお <code>[B &gt;: A]</code> は型の境界で、B は A の supertype であることを表している。
<code>default</code> に何かを入れると <code>A</code> と <code>default</code> の型との共通 supertyper を探して <code>B</code> を推論してくれる。
いいなあ。Scala。</p>

<h2>Using callback</h2>

<p>さて Haxe には call-by-name が無い。
JavaScript も call-by-name が無いが、彼らは callback でそれを代用する。
Haxe でも同じようにできる。</p>

<pre><code>public static function getOrElse&lt;A&gt;(opt: Option&lt;A&gt;, els: Void -&gt; A) {
  return switch (opt) {
  case Some(v): v;
  case None: els();
  }
}
</code></pre>

<p><code>els</code> 部を関数渡すようにしておけば、実際に <code>opt</code> が <code>None</code> のときだけ <code>els</code> を評価することができる。
このとき呼び出し元は以下のようになる。</p>

<pre><code>opt.getOrElse(function() { return sideEffectFunction(); });
// function が return ひとつだけのときは以下のように省略できるが、まだ長い。
opt.getOrElse(function() return sideEffectFunction());
</code></pre>

<p>Haxe では関数リテラルを短く書く方法がなく、return を省略できないため長ったらしい。
仮にこれが CoffeeScript だったとすると、</p>

<pre><code>opt.getOrElse(-&gt; sideEffectFunction())
</code></pre>

<p>と書くことが出来ただろう。
しかしないものねだりをしてもしょうがない。</p>

<h2>Using macro</h2>

<p>もうすこし考えてみたところ、macro 機能を使えば scala ぽいことができることに気がついた。
Macro はコンパイル時に実行されるコードで、プログラムを変更することができる。
Macro というと「怖い。黒魔術！」と身構えてしまうかもしれないが、ひどく怖いわけではない。</p>

<p>プログラムをコンパイルするときはテキストを読み込んで抽象構文木を作る。
C の macro はテキストの段階で置き換えを行うが、 Haxe の macro は抽象構文木の段階で変換を行う。
C では C の文法ではないテキストを macro で処理することができる。
Haxe では、まず抽象構文木を作る必要があるので、元々存在しない文法の文字列は macro を使ってどうこうできない。
<a href="http://haxe.org/manual/macros">Haxe の macro 説明ページ</a>では
「文法が崩れないので解読不能にならない。嬉しいよね！」と主張している。
なお、Scala の macro も Haxe と同じ。
<a href="http://goo.gl/2D99Nl">Wikipediaによると</a> それぞれ Text substitution macros と Syntactic macros という名前で呼ばれるらしい。</p>

<p>Macro を使って書いたオレオレ <code>getOrElse()</code> は以下のとおり。</p>

<pre><code>import haxe.macro.Expr;

macro public static function getOrElse(opt: Expr, els: Expr) {
  return macro switch ($opt) {
  case Some(v): v;
  case None: $els;
  }
}
</code></pre>

<p>関数宣言の頭に <code>macro</code> と付けることで、<code>getOrElse()</code> が macro であることを示している。
Macro 引数の型は基本的に <code>haxe.macro.Expr</code> 型であり、これは抽象構文木上の式を表す。
木上で式を式に変換するわけだから、戻り値も <code>Expr</code> 型だ。
<code>return</code> の次にある <code>macro</code> は、以降の式を <code>Expr</code> に変えてくれる便利なもの。
<code>opt</code> や <code>els</code> の参照は、<code>$</code> prefix を付けて行う。
正直、まだ完全にわかった気はしていないが、 <code>getOrElse()</code> の定義はこれで十分。</p>

<p>呼び出し方は scala と同じ</p>

<pre><code>opt.getOrElse(sideEffectFunction());
</code></pre>

<p>となる。
<code>getOrElse()</code> は macro なので、上の呼び出しはコンパイル時に以下に展開される。</p>

<pre><code>// opt.getOrElse(sideEffectFunction()); が以下に置き換えられる。
switch (opt) {
  case Some(v): v;
  case None: sideEffectFunction();
};
</code></pre>

<p>展開結果を見るとわかるように <code>opt</code> が <code>Some(v)</code> の時には <code>sideEffectFunction()</code> は評価されない。やった。Scala ぽくなった。</p>

<p>なお、macro 引き数の <code>els</code> は macro 定義内で何度でも参照でき、各々が <code>sideEffectFunction()</code> に展開されるため、評価回数が複数回になりうるというところは call-by-name と同じだ。</p>

<h3>まって、それ type safe じゃなくない？</h3>

<p>むぐぐ。
たしかに <code>switch</code> に展開するだけなので <code>els</code> に対する型の制約はない。
Macro でなんとか出来そうな気もするが将来の課題ということに。</p>

<h2>再び callback</h2>

<p>Callback での不満点は無名関数の記法が長いということだったので、macro でそれを解決すれば満足できるかもしれない。
ただし Haxe の文法にないものは macro でどうしようもないので <code>-&gt; sideEffectFunction()</code> のような書き方はできない。</p>

<p>例えばこんな感じ。</p>

<pre><code>macro public static function fn(e: Expr) {
  return macro function() { return $e; };
}
</code></pre>

<p>を mixin すれば callback 版 <code>getOrElse()</code> は以下のように呼び出せる。</p>

<pre><code>opt.getOrElse(sideEffectFunction().fn());
</code></pre>

<p>ここが妥協点かなあ。</p>

<h2>まとめ</h2>

<ul>
<li>Haxe の macro を使うと抽象構文木レベルでプログラムを変更できる</li>
<li>Haxe にも call-by-name あったらいいのに</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haxe で Option用の関数を定義してみた話]]></title>
    <link href="http://tkawachi.github.io/blog/2013/10/31/haxe-optionop/"/>
    <updated>2013-10-31T20:35:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/10/31/haxe-optionop</id>
    <content type="html"><![CDATA[<p>最近 JavaScript で何かを書くことになって困っている。
JavaScript はそれなりに仕事で触れて、それなりに理解はしているが、どうにも好きになれない。
CoffeeScript もそれなりに触れたが、短く書けて式中心の記法ができるものの、それ以外は JavaScript と同じ。
何も変わっていない。</p>

<p>僕の問題（苦手）意識は <a href="http://www.haskell.org/haskellwiki/The_JavaScript_Problem">The JavaScript Problem</a>
によく表されている。</p>

<ol>
<li>JavaScript sucks.</li>
<li>We need JavaScript.</li>
</ol>


<p>もうちょっとマシな言語で書きたいと常々思っていた。</p>

<p>AltJS のなかで TypeScript は触ったが、Haxe は触っていなかった。
理由は「Haxe が吐き出す JavaScript はとても人間が読めるものじゃない」とどこかで聞いていたから。
いざって時には生成された JavaScript が読める形じゃないと困る。</p>

<p>今回ふとしたきっかけで Haxe を触ってみた。
さわってみるとかなり好感触。
出力された JavaScript はそんなに変なことになってなくて普通に読める。
やはり自分で触ってみないとダメだな。
代数的データ型があるなど TypeScript より型機能が強い感じ。</p>

<!-- more -->


<p>本題。
Scala でいうところの <code>scala.Option</code> に対応する型として Haxe には <code>haxe.ds.Option</code> という enum がある。
ただし Scala の case object と違い、Haxe の enum にはメソッドが定義できない。
最初は <code>switch case</code> を使って Option の分岐を書いていた。</p>

<pre><code>var opt: Option&lt;Int&gt; = ...;
switch(opt) {
case Some(v): trace(v);
case None: trace('None');
}
</code></pre>

<p>的な。
これでも悪くないが Scala ぽく書きたかったので、それっぽくできないか考えてみた
（きっと他の人がどこかでやってる気がするけど）。</p>

<p>Haxe の <a href="http://haxe.org/manual/using">using mixin</a> を使えば同じようなことができそう。
次のようなものを作って</p>

<pre><code>import haxe.ds.Option;
class OptionOp {
  public static function map&lt;A,B&gt;(opt: Option&lt;A&gt;, f: A -&gt; B): Option&lt;B&gt; {
    return switch (opt) {
    case None: None;
    case Some(v): Some(f(v));
    };
  }

  public static function newOption&lt;A&gt;(arg: A): Option&lt;A&gt; {
    return if (arg != null) Some(arg) else None;
  }
}
</code></pre>

<p>こんな感じに使う。</p>

<pre><code>import haxe.ds.Option;
using OptionOp;

var x = 123.newOption(); // Scala の Option(123) 的な。
x.map(function(v) { return v * 2; }); // Scala の x.map(_ * 2) 的な。
</code></pre>

<p>他にもいろいろ追加したのが<a href="https://gist.github.com/tkawachi/7208040">こちら</a>。</p>

<p>関数リテラル書くのに毎度 <code>function</code> と書くのは長いが、まあまあ快適に書ける。
コンパイルするとこんな感じになる。</p>

<pre><code>var x = OptionOp.newOption(123);
OptionOp.map(x,function(v) {
        return v * 2;
});    
</code></pre>

<p>「えー。関数の呼び出しが多くて遅そう」という人は <code>inline</code> 化することもできる。
<code>map()</code>, <code>newOption()</code> の定義を <code>public static inline function ...</code> とするとこんな感じの出力に変わる。</p>

<pre><code>var x;
x = haxe.ds.Option.Some(123);
switch(x[1]) {
case 1:
        haxe.ds.Option.None;
        break;
case 0:
        var v = x[2];
        haxe.ds.Option.Some(v * 2);
        break;
}
</code></pre>

<p><code>Some()</code> 関数の呼び出しは残っているものの、 <code>map</code> 関数とその第二引き数で渡した関数の呼び出しは展開された。
これくらいなら速度的にも許容出来る人が多いんじゃない？
読みにくいから僕は inline 化しないけど。</p>

<p>Haxe でどうすればいいのかなと思っているのは Scala の for に相当するもの。
複数の Option があるとき全てが存在するときに何かをするには、 Scala の for を使えば</p>

<pre><code>for (v1 &lt;- opt1; v2 &lt;- opt2) yield { v1 と v2 の計算 }
</code></pre>

<p>みたいに書けるのだが、現在の自分の Haxe 知識レベルだと次のようになる。</p>

<pre><code>opt1.flatMap(function(v1) {
    return opt2.map(function(v2) { return v1 と v2 の計算 });
});
</code></pre>

<p>なんか上手い書き方無いかなあ。
<a href="https://github.com/sledorze/monax">monax</a> 使えばうまくかけるんだろうか？</p>

<h2>まとめ</h2>

<p>JavaScript にアレルギーがあるひとは Haxe 触ると癒されるかも。</p>
]]></content>
  </entry>
  
</feed>
