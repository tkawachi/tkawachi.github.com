<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haxe | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/haxe/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2013-10-31T21:46:48+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haxe で Option用の関数を定義してみた話]]></title>
    <link href="http://tkawachi.github.io/blog/2013/10/31/haxe-optionop/"/>
    <updated>2013-10-31T20:35:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/10/31/haxe-optionop</id>
    <content type="html"><![CDATA[<p>最近 JavaScript で何かを書くことになって困っている。
JavaScript はそれなりに仕事で触れて、それなりに理解はしているが、どうにも好きになれない。
CoffeeScript もそれなりに触れたが、短く書けて式中心の記法ができるものの、それ以外は JavaScript と同じ。
何も変わっていない。</p>

<p>僕の問題（苦手）意識は <a href="http://www.haskell.org/haskellwiki/The_JavaScript_Problem">The JavaScript Problem</a>
によく表されている。</p>

<ol>
<li>JavaScript sucks.</li>
<li>We need JavaScript.</li>
</ol>


<p>もうちょっとマシな言語で書きたいと常々思っていた。</p>

<p>AltJS のなかで TypeScript は触ったが、Haxe は触っていなかった。
理由は「Haxe が吐き出す JavaScript はとても人間が読めるものじゃない」とどこかで聞いていたから。
いざって時には生成された JavaScript が読める形じゃないと困る。</p>

<p>今回ふとしたきっかけで Haxe を触ってみた。
さわってみるとかなり好感触。
出力された JavaScript はそんなに変なことになってなくて普通に読める。
やはり自分で触ってみないとダメだな。
代数的データ型があるなど TypeScript より型機能が強い感じ。</p>

<!-- more -->


<p>本題。
Scala でいうところの <code>scala.Option</code> に対応する型として Haxe には <code>haxe.ds.Option</code> という enum がある。
ただし Scala の case object と違い、Haxe の enum にはメソッドが定義できない。
最初は <code>switch case</code> を使って Option の分岐を書いていた。</p>

<pre><code>var opt: Option&lt;Int&gt; = ...;
switch(opt) {
case Some(v): trace(v);
case None: trace('None');
}
</code></pre>

<p>的な。
これでも悪くないが Scala ぽく書きたかったので、それっぽくできないか考えてみた
（きっと他の人がどこかでやってる気がするけど）。</p>

<p>Haxe の <a href="http://haxe.org/manual/using">using mixin</a> を使えば同じようなことができそう。
次のようなものを作って</p>

<pre><code>import haxe.ds.Option;
class OptionOp {
  public static function map&lt;A,B&gt;(opt: Option&lt;A&gt;, f: A -&gt; B): Option&lt;B&gt; {
    return switch (opt) {
    case None: None;
    case Some(v): Some(f(v));
    };
  }

  public static function newOption&lt;A&gt;(arg: A): Option&lt;A&gt; {
    return if (arg != null) Some(arg) else None;
  }
}
</code></pre>

<p>こんな感じに使う。</p>

<pre><code>import haxe.ds.Option;
using OptionOp;

var x = 123.newOption(); // Scala の Option(123) 的な。
x.map(function(v) { return v * 2; }); // Scala の x.map(_ * 2) 的な。
</code></pre>

<p>他にもいろいろ追加したのが<a href="https://gist.github.com/tkawachi/7208040">こちら</a>。</p>

<p>関数リテラル書くのに毎度 <code>function</code> と書くのは長いが、まあまあ快適に書ける。
コンパイルするとこんな感じになる。</p>

<pre><code>var x = OptionOp.newOption(123);
OptionOp.map(x,function(v) {
        return v * 2;
});    
</code></pre>

<p>「えー。関数の呼び出しが多くて遅そう」という人は <code>inline</code> 化することもできる。
<code>map()</code>, <code>newOption()</code> の定義を <code>public static inline function ...</code> とするとこんな感じの出力に変わる。</p>

<pre><code>var x;
x = haxe.ds.Option.Some(123);
switch(x[1]) {
case 1:
        haxe.ds.Option.None;
        break;
case 0:
        var v = x[2];
        haxe.ds.Option.Some(v * 2);
        break;
}
</code></pre>

<p><code>Some()</code> 関数の呼び出しは残っているものの、 <code>map</code> 関数とその第二引き数で渡した関数の呼び出しは展開された。
これくらいなら速度的にも許容出来る人が多いんじゃない？
読みにくいから僕は inline 化しないけど。</p>

<p>Haxe でどうすればいいのかなと思っているのは Scala の for に相当するもの。
複数の Option があるとき全てが存在するときに何かをするには、 Scala の for を使えば</p>

<pre><code>for (v1 &lt;- opt1; v2 &lt;- opt2) yield { v1 と v2 の計算 }
</code></pre>

<p>みたいに書けるのだが、現在の自分の Haxe 知識レベルだと次のようになる。</p>

<pre><code>opt1.flatMap(function(v1) {
    return opt2.map(function(v2) { return v1 と v2 の計算 });
});
</code></pre>

<p>なんか上手い書き方無いかなあ。
<a href="https://github.com/sledorze/monax">monax</a> 使えばうまくかけるんだろうか？</p>

<h2>まとめ</h2>

<p>JavaScript にアレルギーがあるひとは Haxe 触ると癒されるかも。</p>
]]></content>
  </entry>
  
</feed>
