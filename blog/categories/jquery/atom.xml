<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2013-11-23T22:08:26+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQueryのDeferredとPromise]]></title>
    <link href="http://tkawachi.github.io/blog/2013/01/06/jquery-deferred/"/>
    <updated>2013-01-06T00:44:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/01/06/jquery-deferred</id>
    <content type="html"><![CDATA[<p>JavaScript(というか CoffeeScript)って90年代にブラウザ上で使われていた頃のイメージが拭えず、どうも気持ち悪くて逃げて回ってたんですが、事情があって最近は渋々書いてます。
JavaScripterの皆様にとっては何を今更だとは思いますが <a href="http://qiita.com/items/3d1cf51d7ae91305eaaa">jQuery.Deferredを使って楽しい非同期生活を送る方法</a> を読んで Deferred 便利だな、と思ったので理解したところをメモしておきます。</p>

<!-- more -->


<h2>利用シーン</h2>

<ul>
<li><code>$.get()</code> ってエラーハンドリングできないのか。使えないなー。と思ったとき</li>
<li>複数の AJAX リクエスト(などの非同期処理)を同時に開始して、全部終わったら何かしたいとき。</li>
</ul>


<h2>Deferred object</h2>

<p>キーになるのは
<a href="http://api.jquery.com/category/deferred-object/">Deferred object</a>
です。</p>

<h3>状態</h3>

<p>Deferred object は状態を持ちます。状態は３つのうちいずれか。</p>

<ol>
<li>未解決(unresolved)</li>
<li>解決済み(resolved)</li>
<li>拒否済み(rejected)</li>
</ol>


<p>実装によってはいろいろ呼び名があるみたいですが、jQuery では上のように呼ばれています。
jQuery以外の、例えば CommonJS の
<a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A</a>
では unfulfilled, fulfilled, failed がそれぞれの状態に対応します。</p>

<p>状態の遷移は「未解決→解決済み」「未解決→拒否済み」の二種類だけです。
一度、解決済みや拒否済みになったら未解決に戻ったりしませんし、解決済みから拒否済みへ遷移したりもしません。</p>

<h2>利用者</h2>

<p>このオブジェクトの利用者は</p>

<ul>
<li>a: 非同期処理をする人</li>
<li>b: 非同期処理の結果を受ける人</li>
</ul>


<p>の２人です。
aさんが状態遷移を担当し、bさんがそれに応じて処理を行う役割です。</p>

<p>Deferred object はaさんからbさんへ提供されますが、大抵の場合は Deferred の機能制限版である
<a href="http://api.jquery.com/Types/#Promise">Promise object</a>
が bさんに渡されます。
状態遷移を起こすのはaさん担当で、bさんがそれをしてはまずいので、Promiseでは状態遷移関連のメソッドが取り除かれています。
Promise は Deferred の <code>.promise()</code> メソッドで得られます。</p>

<p>非同期処理の関数コール時の戻り値として a から b に Promise object が渡されます。
処理が終わったら結果を渡すから約束手形(Promise)をもっておいてくれ、というわけですね。</p>

<h2>解決または拒否へ</h2>

<p>aさんは非同期処理が終わったら約束通り結果を渡します。
引数に処理結果を渡して<code>.resolve()</code> メソッドを呼び出すことで、解決済み状態へ遷移します。</p>

<p>処理が失敗に終わった場合には <code>.reject()</code> を呼びます。</p>

<h2>約束手形(Promise)の使い方</h2>

<p>書いてて思ったのですが、約束手形は一定の期日に支払いをする約束であるのに対して、Promise はいつ処理が完了するかわからないので少し違いました。
どちらかというとカイジの
<a href="http://fukumoto.lsx3.net/?%CC%DB%BC%A8%CF%BF%2F%CD%F8%BA%AC%C0%EE%B9%AC%CD%BA#b1869786">その気になれば10年後20年後ということも可能だろう</a>
という大金の引換券に似ています。</p>

<p>ともあれ、Promise はその時点では結果が出ていないので、すぐに結果を利用することができません。
代わりに callback を登録しておくことができます。</p>

<p><code>javascript
// 解決済みになったら呼ばれる callback を登録
promise.done(function(data) { dataは処理結果 });
// 拒否済みになったら呼ばれる callback を登録
promise.fail(function() { エラー処理 });
// 解決済みもしくは拒否済みになったら呼ばれる callback を登録
promise.always(function() { 処理 });
</code></p>

<p>callback 複数登録する事ができ、登録した順に呼ばれます。例えば <code>done()</code> を複数回呼び出して解決済みになったときの callback を複数個登録することができます。</p>

<p><code>done()</code>, <code>fail()</code>, <code>always()</code> は Deferred の場合は Deferred, Promise の場合は Promise を返すので、method chain でつなげることができます。</p>

<h2>約束の組み合せ</h2>

<p>受け取った Promise/Deferred は <code>$.when()</code> で組み合わせることができます。
組み合わせると、渡したものすべてが解決済みになったときに解決済みになる Promise が返されます。
組み合せにより、複数の非同期処理がすべて完了したら何かを実行することができます。</p>

<p>組み合わせた場合、 callback の引数に渡される結果も増えます。
以下のコードで d1, d2 にはそれぞれ promise1, promise2 の結果が渡されます。</p>

<p><code>javascript
$.when(promise1, promise2).done(function(d1, d2) { … });
</code></p>

<p><code>$.when()</code> に Defered でも Promise でもない値を渡した場合、解決済みの値として扱われます。</p>

<p><code>javascript
$.when(10, promise).done(function(d1, d2) { … });
</code></p>

<p>などとした場合、10は解決済みと見なされ、<code>promise</code>が解決済みになり次第、<code>d1</code> に 10 が渡されて callback が実行されます。</p>

<h2>$.ajax の戻り値は Promise</h2>

<p><code>$.ajax</code>, <code>$.get</code>, <code>$.post</code> など AJAX 関数群の戻り値 jqXHR は Promise と同じインタフェースを備えています。
すなわち <code>$.when</code> を使って、複数の AJAX 通信がすべて完了したら次に…をするといったコードが簡潔に書けます。</p>

<p>また <code>$.get</code> などはエラーコールバックを引数に取れませんが、戻り値は Promise ですので、これに <code>.fail()</code> を呼び出すことでエラーコールバックを登録することができます。
今まで使えない子だと思っていたのですが、僕が知らないだけでずっと前に使える子になってたんですね。</p>

<h2>まとめ</h2>

<p>なんだか長くなってしまった。まとめ。</p>

<ul>
<li>Deferred は３状態をもつ</li>
<li>解決済み、拒否済みになった時に実行するコールバックを登録できる</li>
<li>Promise は Deferred の機能制限版 (結果をもらう人向け)</li>
<li><code>$.when</code> で Deferred/Promise を組み合せられる</li>
<li><code>$.ajax</code>, <code>$.get</code>, etc. の戻り値は Promise</li>
</ul>

]]></content>
  </entry>
  
</feed>
