<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2013-10-31T21:42:30+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord のモデルを整理する7つのパターン]]></title>
    <link href="http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern/"/>
    <updated>2013-09-21T21:18:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern</id>
    <content type="html"><![CDATA[<p><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a>
という記事があり、読もう読もうと思いつつ1年くらい経ってしまった。
ようやく読んだので理解した内容を書いておく。
コード例は元記事のもの。</p>

<!-- more -->


<p>Rails で thin controller, fat model を心がけていると、model がマジで激太りしてヤバくなる。
実際に自分が仕事で書いている rails アプリも激太りしててヤバい。
この blog の筆者が作っている <a href="https://codeclimate.com/">CodeClimate</a> で C 判定をもらう程度には肥満体型になっている。</p>

<h2>Mixinに抜き出さない!</h2>

<p>Model が太ってきた時に考えるのは <code>ActiveSupport::Concern</code> を使って感心事を抜き出して、Mixin にすることだと思う。
実際に手元のアプリでも <code>models/concerns/</code> なんていうディレクトリがあったりする。</p>

<p>でもこれはアンチパターン。
Mixin は継承と同じように複雑さを増す。
やってみると、さほど綺麗に分けられないんだよね。
記事では mixin はするな、と書いてある。</p>

<p>ここからがパターンの紹介。</p>

<h2>1. Value object の抽出</h2>

<p><a href="http://en.wikipedia.org/wiki/Value_object">Value object</a>
は値が等しければ等しいとされるようなオブジェクトで、だいたいは immutable。
この value object を抜き出して、関連するロジックを抜き出したクラスに移す。</p>

<p>どんなときに使うか？
属性に強く結びついたロジックがあるとき。</p>

<p>例として挙げられているのは、電話番号、お金など。
CodeClimate には AからF の値をとる <code>Rating</code> value object があるらしい。</p>

<pre><code>class Rating
  include Comparable

  def self.from_cost(cost)
    if cost &lt;= 2
      new("A")
    elsif cost &lt;= 4
      new("B")
    elsif cost &lt;= 8
      new("C")
    elsif cost &lt;= 16
      new("D")
    else
      new("F")
    end
  end

  def initialize(letter)
    @letter = letter
  end

  def better_than?(other)
    self &gt; other
  end

  def &lt;=&gt;(other)
    other.to_s &lt;=&gt; to_s
  end

  def hash
    @letter.hash
  end

  def eql?(other)
    to_s == other.to_s
  end

  def to_s
    @letter.to_s
  end
end
</code></pre>

<p><code>cost</code> から rating を計算するロジックと、比較ロジックがこのクラスに抜き出されている。
<code>#hash</code>, <code>#eql?</code> を定義しておくと、hash key として使うことができる。</p>

<p>ActiveRecord 側。
<code>rating</code> は DB に保存された値から計算される値みたい。</p>

<pre><code>class ConstantSnapshot &lt; ActiveRecord::Base
  # …

  def rating
    @rating ||= Rating.from_cost(cost)
  end
end
</code></pre>

<p>Value object として抜き出せるものがあれば、間違いなく抜き出したほうがいいね。</p>

<h2>2. Service object の抽出</h2>

<p>以下の基準の１つ以上に合致したときには service object の抜き出しを薦めている。</p>

<ul>
<li>アクションが複雑なとき</li>
<li>アクションが複数のモデルに触るとき</li>
<li>アクションが外部サービスとやりとりするとき</li>
<li>アクションがモデルの主な関心事ではないとき</li>
<li>アクションを実行するのにいくつもの方法があるとき（GoFのストラテジパターン）</li>
</ul>


<p>以下の例はユーザ認証を行う service object。</p>

<pre><code>class UserAuthenticator
  def initialize(user)
    @user = user
  end

  def authenticate(unencrypted_password)
    return false unless @user

    if BCrypt::Password.new(@user.password_digest) == unencrypted_password
      @user
    else
      false
    end
  end
end
</code></pre>

<p>ここで <code>user</code> がモデルで、認証というアクションを service object として抽出している。</p>

<p>結局のところ「複雑なメソッド（群）を見つけたら別のクラスにしましょう」ということかな。</p>

<h2>3. Form object の抽出</h2>

<p>フォームの submit で複数のモデルが更新される場合などに使うパターン。
以下の例は <code>User</code> と <code>Company</code> の両方を更新する。</p>

<pre><code>class Signup
  include Virtus

  extend ActiveModel::Naming
  include ActiveModel::Conversion
  include ActiveModel::Validations

  attr_reader :user
  attr_reader :company

  attribute :name, String
  attribute :company_name, String
  attribute :email, String

  validates :email, presence: true
  # … more validations …

  # Forms are never themselves persisted
  def persisted?
    false
  end

  def save
    if valid?
      persist!
      true
    else
      false
    end
  end

private

  def persist!
    @company = Company.create!(name: company_name)
    @user = @company.users.create!(name: name, email: email)
  end
end
</code></pre>

<p><code>Signup</code> クラスは <a href="https://github.com/solnic/virtus">Virtus</a> を使うことで、
ActiveModel のように属性を持つことができる。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Naming.html"><code>ActiveModel::Naming</code></a>と
<a href="http://api.rubyonrails.org/classes/ActiveModel/Conversion.html"><code>ActiveModel::Conversion</code></a>は、つけとくと良いことがあるみたい。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Validations.html"><code>ActiveModel::Validations</code></a> を include することで validation も掛けられる。</p>

<h2>4. Query object の抽出</h2>

<p>複雑なクエリを発行するときは query object を使うといいかも。
放置されたアカウントを探す query object の例。</p>

<pre><code>class AbandonedTrialQuery
  def initialize(relation = Account.scoped)
    @relation = relation
  end

  def find_each(&amp;block)
    @relation.
      where(plan: nil, invites_count: 0).
      find_each(&amp;block)
  end
end
</code></pre>

<p>コンストラクタに渡されているのは <code>ActiveRecord::Relation</code> のインスタンス。
他の条件がついた relation を渡すと、クエリを組み立てることができる。</p>

<pre><code>old_accounts = Account.where("created_at &lt; ?", 1.month.ago)
old_abandoned_trials = AbandonedTrialQuery.new(old_accounts)
</code></pre>

<p>この手のクラスは隔離した状態でのテストを頑張らず、DBにアクセスする形でテストしたほうがいい。</p>

<h2>5. View object の導入</h2>

<p>表示に限ったロジックを書いている場合には、それを抜き出すことを考える。
「もし別のインターフェース（例えば音声コントロールのUI）を実装するときに必要かな？」と考えて No なら view object が向いてる。
以下は Code Climate のドーナツチャートの例。</p>

<pre><code>class DonutChart
  def initialize(snapshot)
    @snapshot = snapshot
  end

  def cache_key
    @snapshot.id.to_s
  end

  def data
    # pull data from @snapshot and turn it into a JSON structure
  end
end
</code></pre>

<h2>6. Policy object の抽出</h2>

<p>読み込みポリシーに特化したオブジェクト。
ビジネスルールをひとつカプセル化する。</p>

<p>Service object に似ているが、service object は操作、 policy object は読み込みを担当。
Query object にも似ているが、query object は SQL 発行、 policy object はメモリ上のドメインモデル読み込みを担当する。</p>

<pre><code>class ActiveUserPolicy
  def initialize(user)
    @user = user
  end

  def active?
    @user.email_confirmed? &amp;&amp;
    @user.last_login_at &gt; 14.days.ago
  end
end
</code></pre>

<p>上記の例は、だれが &ldquo;active?&rdquo; か、という定義を与えている。</p>

<h2>7. Decorator の抽出</h2>

<p>既存の機能の上に機能を足したいときに使うパターン。
たとえばコメント書き込み時に、Facebook wall へもポストするような時に使う。</p>

<pre><code>class FacebookCommentNotifier
  def initialize(comment)
    @comment = comment
  end

  def save
    @comment.save &amp;&amp; post_to_wall
  end

private

  def post_to_wall
    Facebook.post(title: @comment.title, user: @comment.author)
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew RMagick]]></title>
    <link href="http://tkawachi.github.io/blog/2013/01/05/homebrew-rmagick/"/>
    <updated>2013-01-05T14:38:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/01/05/homebrew-rmagick</id>
    <content type="html"><![CDATA[<p>Homebrew で ImageMagick をインストールして RVM 環境の ruby に rmagick gem を入れようとしたら意外に苦労したのでメモ。</p>

<!-- more -->


<p>最終的な手順</p>

<ol>
<li><code>brew update</code></li>
<li><code>brew install ghostscript imagemagick</code></li>
<li><code>ln -s /usr/local/lib/libMagickCore-Q16.dylib /usr/local/lib/libMagickCore.dylib</code></li>
<li><code>gem install rmagick</code></li>
<li><code>rm /usr/local/lib/libMagickCore.dylib</code></li>
</ol>


<p>ハマりポイント</p>

<ul>
<li>brew では <code>MagickCore-Q16</code> という名前でライブラリがインストールされる。
RMagick の <a href="https://github.com/rmagick/rmagick/blob/master/ext/RMagick/extconf.rb#L207">extconf.rb</a> では <code>MagickCore</code>, <code>Magick</code>, <code>Magick++</code> という
名前でライブラリの存在を確認しているため、ここで落ちる。
<code>-Q16</code> ってなんじゃ！

<ul>
<li>→ <code>/usr/local/lib/libMagickCore.dylib</code> に symlink しちゃう。
<code>MagickCore</code>, <code>Magick</code>, <code>Magick++</code> のうち一つだけあればチェックは通るので
<code>libMagickCore.dylib</code> だけで OK。
また gem のインストールが終わったら不要なので symlink 消しとく。</li>
</ul>
</li>
<li>rmagick gem のインストールが途中で止まる。ghostscript 入ってないと途中で止まるっぽい。。

<ul>
<li>→ brew で ghostscript も入れる。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupport 日時計算の罠]]></title>
    <link href="http://tkawachi.github.io/blog/2012/12/08/a-trap-of-active-support-time/"/>
    <updated>2012-12-08T11:03:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2012/12/08/a-trap-of-active-support-time</id>
    <content type="html"><![CDATA[<p>ActiveSupport の日時計算はとても便利です。直感的な記法でスラスラ書けちゃいます。
でもハマるポイントもありますので注意してください。
というか昨日僕がやらかしたことの告白です。</p>

<p>下のコードを見てください。</p>

<p>``` ruby
t1 = Time.new(2012, 12, 1)</p>

<p>t2 = t1 + 1.day
t2 &ndash; t1 == 1.day # => true</p>

<p>t3 = t1 + 1.month
t3 &ndash; t1 == 1.month # => false
```</p>

<p>a = b + c だったら普通 a &ndash; b = c だろうと思うのですが、最後の式は false を返します。
なぜだかわかりますか？</p>

<!-- more -->


<p><code>t1</code> は 2012年1月1日ですから、<code>t3 = t1 + 1.month</code> によって <code>t3</code> には１か月後の 2012年2月1日が入ります。
具体的には
<a href="https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/date/calculations.rb#L108-L116">Date#advance</a>
の中で <code>Date#&gt;&gt;</code> を使って１か月後の日付が計算されています。</p>

<p><code>Time</code> インスタント間の引き算はふたつの時刻間の秒数を返します。
<code>t3 - t1</code> は 2012年1月1日から2012年2月1日までの秒数である <code>2678400.0</code> を返します。
これと <code>1.month</code> を比較するのですが、<code>1.month</code> は <code>30.days</code> つまり <code>2592000</code> 秒となります。</p>

<p>足す時は1ヶ月(2012年1月1日に足す場合は31日間)なのに、比較時は30日間と比較していたために等式が成り立たないということでした。
たしかに時刻差だけを与えられた場合、それが何ヶ月分かはわからないですよね。</p>

<p>month 以外の <code>Duration</code> である days, minutes, seconds では単位時間が常に同じであるため、このような症状はおきません。
year に関してはうるう年の時に同じ症状が発生します。</p>

<p>わかってしまえばなんともないが、知らないとハマりやすいポイントでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile ruby 1.9.3 on Mac OS X Lion using RVM]]></title>
    <link href="http://tkawachi.github.io/blog/2011/12/27/compile-ruby-1-dot-9-3-on-mac-os-x-lion/"/>
    <updated>2011-12-27T23:52:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2011/12/27/compile-ruby-1-dot-9-3-on-mac-os-x-lion</id>
    <content type="html"><![CDATA[<p>仕事で Ruby を使うことになったので、家の Lion ちゃんにも ruby インストール
しとこうと思ったらエラーになる。
rvm の version は 1.10.0。</p>

<p>```
$ rvm install 1.9.3
Installing Ruby from source to: /Users/kawachi/.rvm/rubies/ruby-1.9.3-p0, this may take a while depending on your cpu(s)&hellip;</p>

<p>ruby-1.9.3-p0 &ndash; #fetching
ruby-1.9.3-p0 &ndash; #extracted to /Users/kawachi/.rvm/src/ruby-1.9.3-p0 (already extracted)
Fetching yaml-0.1.4.tar.gz to /Users/kawachi/.rvm/archives
Extracting yaml-0.1.4.tar.gz to /Users/kawachi/.rvm/src
Configuring yaml in /Users/kawachi/.rvm/src/yaml-0.1.4.
Compiling yaml in /Users/kawachi/.rvm/src/yaml-0.1.4.
Installing yaml to /Users/kawachi/.rvm/usr
ruby-1.9.3-p0 &ndash; #configuring
ERROR: Error running &lsquo; ./configure &mdash;prefix=/Users/kawachi/.rvm/rubies/ruby-1.9.3-p0 &mdash;enable-shared &mdash;disable-install-doc &mdash;with-libyaml-dir=/Users/kawachi/.rvm/usr &rsquo;, please read /Users/kawachi/.rvm/log/ruby-1.9.3-p0/configure.log
ERROR: There has been an error while running configure. Halting the installation.
```</p>

<p><code>~/.rvm/log/ruby-1.9.3-p0/configure.log</code> はこんな感じ。</p>

<p><code>
[2011-12-27 23:50:52]  ./configure --prefix=/Users/kawachi/.rvm/rubies/ruby-1.9.3-p0 --enable-shared --disable-install-doc --with-libyaml-dir=/Users/kawachi/.rvm/usr
configure: WARNING: unrecognized options: --with-libyaml-dir
checking build system type... x86_64-apple-darwin11.2.0
checking host system type... x86_64-apple-darwin11.2.0
checking target system type... x86_64-apple-darwin11.2.0
checking whether the C compiler works... no
configure: error: in `/Users/kawachi/.rvm/src/ruby-1.9.3-p0':
configure: error: C compiler cannot create executablesSee `config.log' for more details
</code></p>

<p><code>CC=gcc</code> を指定すると少し変わる。</p>

<!-- more -->


<p><code>
$ CC=gcc rvm install 1.9.3
ERROR: The provided CC(gcc) is LLVM based, it is not yet fully supported by ruby and gems, please read `rvm requirements`.
</code></p>

<p><code>rvm requirements</code> を読むといろいろ書いてある。</p>

<p>```
  Notes for Darwin ( Mac OS X )</p>

<pre><code>For Snow Leopard: Xcode Version 3.2.1 (1613) or later, such as 3.2.6 or Xcode 4.1.
[ Please note that Xcode 3.x will *not* work on OS X Lion. The 'cross-over' is Xcode 4.1. ]

You should download the Xcode tools from developer.apple.com, since the Snow Leopard dvd install contained bugs.
You can find Xcode 4.1 for OS X Lion at:
https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.1_for_lion/xcode_4.1_for_lion.dmg

** Lion Users: Xcode Version 4.2.x for OS X Lion works only for ruby 1.9.3-p0 (or higher).
               It currently fails to build several other rubies and gems, as well as several Homebrew and
               Macports packages. Xcode Version 4.1 (4B110) works.
** NOTE: Currently, Node.js is having issues building with osx-gcc-installer. This is _not_ an RVM issue. This is
   because Node.js depends on the Carbon headers. ox-gcc-installer does not install these to the system.
   This issue only affects users using osx-gcc-installer, and not Xcode. The only fix is to install Xcode over osx-gcc-installer.

For MacRuby: Install LLVM first.
For JRuby:  Install the JDK. See http://developer.apple.com/java/download/  # Current Java version 1.6.0_26
For IronRuby: Install Mono &gt;= 2.6
    For Ruby 1.9.3: Install libksba # If using Homebrew, 'brew install libksba'
</code></pre>

<p>```</p>

<p>なんかいろいろ書いてある。
自分の環境 (Lion, Xcode 4.2.1) に関連しそうなのは、</p>

<ul>
<li>Lion で Xcode 4.1 だとうまくいく</li>
<li>Lion の Xcode 4.2 でコンパイルできるのは ruby 1.9.3-p0 とそれ以降</li>
<li>Ruby 1.9.3 をインストールする前に libksba をインストールせよ</li>
</ul>


<p>たしかに Xcode 4.2 なので LLVM しかないけど、
ruby 1.9.3-p0 はコンパイルできるんじゃないの？
RVM で止められてる気がする。。。</p>

<p><code>~/.rvm/scripts/functions/build</code> を参照すると、
<code>CC</code> 環境変数が存在するときは <code>--version</code> 付きで実行して LLVM だったら <code>exit 1</code> してる。</p>

<p>```
&mdash;&ndash; .rvm/scripts/functions/build.orig   2011-12-28 00:29:10.000000000 +0900
+++ .rvm/scripts/functions/build        2011-12-28 00:29:32.000000000 +0900
@@ -29,7 +29,7 @@</p>

<pre><code>   else
     rvm_error "The autodetected CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`, and set CC=/path/to/gcc ."
   fi
</code></pre>

<ul>
<li>   exit 1</li>
<li>   #exit 1
 fi</li>
</ul>


<p>   fi
```</p>

<p>とりあえず上記のとおりコメントアウトしてみたら
<code>$ CC=gcc rvm install 1.9.3</code> で compile できた。</p>

<p>正しいやり方でないような気はするけど、まいっか。</p>
]]></content>
  </entry>
  
</feed>
