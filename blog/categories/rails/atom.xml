<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2014-11-06T01:31:00+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord のモデルを整理する7つのパターン]]></title>
    <link href="http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern/"/>
    <updated>2013-09-21T21:18:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern</id>
    <content type="html"><![CDATA[<p><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a>
という記事があり、読もう読もうと思いつつ1年くらい経ってしまった。
ようやく読んだので理解した内容を書いておく。
コード例は元記事のもの。</p>

<!-- more -->


<p>Rails で thin controller, fat model を心がけていると、model がマジで激太りしてヤバくなる。
実際に自分が仕事で書いている rails アプリも激太りしててヤバい。
この blog の筆者が作っている <a href="https://codeclimate.com/">CodeClimate</a> で C 判定をもらう程度には肥満体型になっている。</p>

<h2>Mixinに抜き出さない!</h2>

<p>Model が太ってきた時に考えるのは <code>ActiveSupport::Concern</code> を使って感心事を抜き出して、Mixin にすることだと思う。
実際に手元のアプリでも <code>models/concerns/</code> なんていうディレクトリがあったりする。</p>

<p>でもこれはアンチパターン。
Mixin は継承と同じように複雑さを増す。
やってみると、さほど綺麗に分けられないんだよね。
記事では mixin はするな、と書いてある。</p>

<p>ここからがパターンの紹介。</p>

<h2>1. Value object の抽出</h2>

<p><a href="http://en.wikipedia.org/wiki/Value_object">Value object</a>
は値が等しければ等しいとされるようなオブジェクトで、だいたいは immutable。
この value object を抜き出して、関連するロジックを抜き出したクラスに移す。</p>

<p>どんなときに使うか？
属性に強く結びついたロジックがあるとき。</p>

<p>例として挙げられているのは、電話番号、お金など。
CodeClimate には AからF の値をとる <code>Rating</code> value object があるらしい。</p>

<pre><code>class Rating
  include Comparable

  def self.from_cost(cost)
    if cost &lt;= 2
      new("A")
    elsif cost &lt;= 4
      new("B")
    elsif cost &lt;= 8
      new("C")
    elsif cost &lt;= 16
      new("D")
    else
      new("F")
    end
  end

  def initialize(letter)
    @letter = letter
  end

  def better_than?(other)
    self &gt; other
  end

  def &lt;=&gt;(other)
    other.to_s &lt;=&gt; to_s
  end

  def hash
    @letter.hash
  end

  def eql?(other)
    to_s == other.to_s
  end

  def to_s
    @letter.to_s
  end
end
</code></pre>

<p><code>cost</code> から rating を計算するロジックと、比較ロジックがこのクラスに抜き出されている。
<code>#hash</code>, <code>#eql?</code> を定義しておくと、hash key として使うことができる。</p>

<p>ActiveRecord 側。
<code>rating</code> は DB に保存された値から計算される値みたい。</p>

<pre><code>class ConstantSnapshot &lt; ActiveRecord::Base
  # …

  def rating
    @rating ||= Rating.from_cost(cost)
  end
end
</code></pre>

<p>Value object として抜き出せるものがあれば、間違いなく抜き出したほうがいいね。</p>

<h2>2. Service object の抽出</h2>

<p>以下の基準の１つ以上に合致したときには service object の抜き出しを薦めている。</p>

<ul>
<li>アクションが複雑なとき</li>
<li>アクションが複数のモデルに触るとき</li>
<li>アクションが外部サービスとやりとりするとき</li>
<li>アクションがモデルの主な関心事ではないとき</li>
<li>アクションを実行するのにいくつもの方法があるとき（GoFのストラテジパターン）</li>
</ul>


<p>以下の例はユーザ認証を行う service object。</p>

<pre><code>class UserAuthenticator
  def initialize(user)
    @user = user
  end

  def authenticate(unencrypted_password)
    return false unless @user

    if BCrypt::Password.new(@user.password_digest) == unencrypted_password
      @user
    else
      false
    end
  end
end
</code></pre>

<p>ここで <code>user</code> がモデルで、認証というアクションを service object として抽出している。</p>

<p>結局のところ「複雑なメソッド（群）を見つけたら別のクラスにしましょう」ということかな。</p>

<h2>3. Form object の抽出</h2>

<p>フォームの submit で複数のモデルが更新される場合などに使うパターン。
以下の例は <code>User</code> と <code>Company</code> の両方を更新する。</p>

<pre><code>class Signup
  include Virtus

  extend ActiveModel::Naming
  include ActiveModel::Conversion
  include ActiveModel::Validations

  attr_reader :user
  attr_reader :company

  attribute :name, String
  attribute :company_name, String
  attribute :email, String

  validates :email, presence: true
  # … more validations …

  # Forms are never themselves persisted
  def persisted?
    false
  end

  def save
    if valid?
      persist!
      true
    else
      false
    end
  end

private

  def persist!
    @company = Company.create!(name: company_name)
    @user = @company.users.create!(name: name, email: email)
  end
end
</code></pre>

<p><code>Signup</code> クラスは <a href="https://github.com/solnic/virtus">Virtus</a> を使うことで、
ActiveModel のように属性を持つことができる。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Naming.html"><code>ActiveModel::Naming</code></a>と
<a href="http://api.rubyonrails.org/classes/ActiveModel/Conversion.html"><code>ActiveModel::Conversion</code></a>は、つけとくと良いことがあるみたい。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Validations.html"><code>ActiveModel::Validations</code></a> を include することで validation も掛けられる。</p>

<h2>4. Query object の抽出</h2>

<p>複雑なクエリを発行するときは query object を使うといいかも。
放置されたアカウントを探す query object の例。</p>

<pre><code>class AbandonedTrialQuery
  def initialize(relation = Account.scoped)
    @relation = relation
  end

  def find_each(&amp;block)
    @relation.
      where(plan: nil, invites_count: 0).
      find_each(&amp;block)
  end
end
</code></pre>

<p>コンストラクタに渡されているのは <code>ActiveRecord::Relation</code> のインスタンス。
他の条件がついた relation を渡すと、クエリを組み立てることができる。</p>

<pre><code>old_accounts = Account.where("created_at &lt; ?", 1.month.ago)
old_abandoned_trials = AbandonedTrialQuery.new(old_accounts)
</code></pre>

<p>この手のクラスは隔離した状態でのテストを頑張らず、DBにアクセスする形でテストしたほうがいい。</p>

<h2>5. View object の導入</h2>

<p>表示に限ったロジックを書いている場合には、それを抜き出すことを考える。
「もし別のインターフェース（例えば音声コントロールのUI）を実装するときに必要かな？」と考えて No なら view object が向いてる。
以下は Code Climate のドーナツチャートの例。</p>

<pre><code>class DonutChart
  def initialize(snapshot)
    @snapshot = snapshot
  end

  def cache_key
    @snapshot.id.to_s
  end

  def data
    # pull data from @snapshot and turn it into a JSON structure
  end
end
</code></pre>

<h2>6. Policy object の抽出</h2>

<p>読み込みポリシーに特化したオブジェクト。
ビジネスルールをひとつカプセル化する。</p>

<p>Service object に似ているが、service object は操作、 policy object は読み込みを担当。
Query object にも似ているが、query object は SQL 発行、 policy object はメモリ上のドメインモデル読み込みを担当する。</p>

<pre><code>class ActiveUserPolicy
  def initialize(user)
    @user = user
  end

  def active?
    @user.email_confirmed? &amp;&amp;
    @user.last_login_at &gt; 14.days.ago
  end
end
</code></pre>

<p>上記の例は、だれが &ldquo;active?&rdquo; か、という定義を与えている。</p>

<h2>7. Decorator の抽出</h2>

<p>既存の機能の上に機能を足したいときに使うパターン。
たとえばコメント書き込み時に、Facebook wall へもポストするような時に使う。</p>

<pre><code>class FacebookCommentNotifier
  def initialize(comment)
    @comment = comment
  end

  def save
    @comment.save &amp;&amp; post_to_wall
  end

private

  def post_to_wall
    Facebook.post(title: @comment.title, user: @comment.author)
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでTypeScript、再び]]></title>
    <link href="http://tkawachi.github.io/blog/2013/04/25/typescript-and-rails-again/"/>
    <updated>2013-04-25T23:22:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/04/25/typescript-and-rails-again</id>
    <content type="html"><![CDATA[<p>Google で typescript rails と検索すると去年12月に書いた「<a href="http://tkawachi.github.io/blog/2012/12/09/trying-typescript-rails-out/">Rails で TypeScript を動かそうとして失敗した記録</a>」というエントリが2番目に出てくる日々が続いている。
「TypeScriptをRailsで使いたい」と思った人たちは、検索結果を見て、ああ動かないのかと思うのだろう。</p>

<p>あれから状況は少しだけ改善した。
typescript-rails gem で <code>/// &lt;reference&gt;</code> が一部使えるようになった。
というか使えるようにする <a href="https://github.com/klaustopher/typescript-rails/pull/6">patch</a> を出した。</p>

<p>この patch により、<code>node</code> コマンドをインストールしてあることが前提になったので注意されたし。</p>

<p>サンプルを作ろうと思い
<a href="https://github.com/tkawachi/typescript-rails-sample/blob/051838b7/app/assets/javascripts/test.js.ts.erb">test.js.ts.erb</a>
を書いてみた。
<code>.js.ts</code> ファイルや <code>.d.ts</code> ファイルを参照できるようになっていることがわかると思う。
サンプル内でやっているように <code>jquery.d.ts</code> を参照して、 jQuery も使えるようになった。</p>

<p>一方で以下の問題が残っている。
TypeScript compiler に渡る際に違うディレクトリにコピーされるため、参照先を絶対パスで指定している。そのため <code>.erb</code> suffix を付ける必要がある。
また参照先の拡張子が <code>.js.ts</code>, <code>.d.ts</code> ならば大丈夫だが <code>.js.ts.erb</code> の場合、compiler が参照してくれない。</p>

<p>これらの問題を解消しないとちょっと本格利用はできないかなあ。
また時間がとれたらなんとかしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails で TypeScript を動かそうとして失敗した記録]]></title>
    <link href="http://tkawachi.github.io/blog/2012/12/09/trying-typescript-rails-out/"/>
    <updated>2012-12-09T11:27:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2012/12/09/trying-typescript-rails-out</id>
    <content type="html"><![CDATA[<p>Microsoft 発の型付き JavaScript こと TypeScript が人気ですね。
<a href="https://github.com/klaustopher/typescript-rails">typescript-rails</a> という gem があったので、動くのか試してみました。</p>

<p>結論から言っておくと、他のスクリプトやライブラリを参照する TypeScript をコンパイルすることが今回はできませんでした。</p>

<!-- more -->


<pre><code class="sh">$ rails new typescript-rails-test -T
$ echo 'gem "typescript-rails"' &gt;&gt; Gemfile
$ bundle
$ bundle exec rails g controller test index
      create  app/controllers/test_controller.rb
       route  get "test/index"
      invoke  erb
      create    app/views/test
      create    app/views/test/index.html.erb
      invoke  helper
      create    app/helpers/test_helper.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/test.js.coffee
      invoke    scss
      create      app/assets/stylesheets/test.css.scss
$ rm app/assets/javascripts/test.js.coffee
$ echo 'alert("Hello TypeScript")' &gt; app/assets/javascripts/test.js.ts
$ bundle exec rails s
</code></pre>

<p>これで <a href="http://localhost:3000/test/index">http://localhost:3000/test/index</a> にアクセスすると、正しく alert が表示される。
いいぞ。</p>

<p>次に JQuery が使ってみたい。
<code>javascript app/assets/javascripts/test.js.ts
$(function() {
  alert("document ready")
})
</code></p>

<p>うーむ。エラーがおきた。</p>

<pre><code class="text">SyntaxError: (4,1): The name '$' does not exist in the current scope
  (in /Users/kawachi/gitworks/typescript-rails-test/app/assets/javascripts/test.js.ts)
</code></pre>

<p><a href="https://github.com/klaustopher/typescript-rails/issues/5">Issue #5</a>
に報告されている問題と同一。
<code>/// &lt;reference path="jquery.d.ts" /&gt;</code> という行をいれて <code>$</code> の存在を TypeScript compiler に知らしめねばならないらしいが、これが今のところできないようだ。</p>

<p><a href="https://github.com/TimothyKlim/typescript-ruby/issues/1">https://github.com/TimothyKlim/typescript-ruby/issues/1</a>
によれば、compiler 内の IO class が利用している CommonJS の機能を ExecJS が隠してしまっているのが原因とのこと。
ExecJS を経由せずに直接 Node.js を叩けばいいのでは、と。</p>

<p>これが ExecJS から node を叩くときにソースコードをラッピングするものだが、
よく見ると module, exports, require, console が undefined にされていることがわかる。(<code>result = program();</code> のところで引数に何も渡されていない)
隠されている CommonJS の機能とはきっとこのことを言っているのだろう。</p>

<pre><code class="javascript execjs/support/node_runner.js">(function(program, execJS) { execJS(program) })(function(module, exports, require, console) { #{source}
}, function(program) {
  var output, print = function(string) {
    process.stdout.write('' + string);
  };
  try {
    result = program();
    if (typeof result == 'undefined' &amp;&amp; result !== null) {
      print('["ok"]');
    } else {
      try {
        print(JSON.stringify(['ok', result]));
      } catch (err) {
        print('["err"]');
      }
    }
  } catch (err) {
    print(JSON.stringify(['err', '' + err]));
  }
});
</code></pre>

<p><a href="https://github.com/sstephenson/execjs/issues/91">このへん</a>
をみると ExecJS の作者は、副作用を与えるこれらの機能を ExecJS に取り込むつもりは毛頭ないようだ。</p>

<p>上のコードを手元で少し書き換えて module, exports, require を書き潰さないようにしてみたが、やはり同じエラーが出た。
ということは、これらの関数が undefined になっていることが直接の理由ではないということか。</p>

<p><a href="http://vividcode.hatenablog.com/entry/ts/run-on-rhino">JavaScript 処理系 Rhino で TypeScript コンパイラのビルドを試してみた</a>
によると TypeScript がサポートしているのは Node.js と JScript だけなので、Node.js の存在を前提として TypeScript compiler を動かすモジュール作ったほうが早そうな感じ。</p>

<p>時間が取れたら作りたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupport 日時計算の罠]]></title>
    <link href="http://tkawachi.github.io/blog/2012/12/08/a-trap-of-active-support-time/"/>
    <updated>2012-12-08T11:03:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2012/12/08/a-trap-of-active-support-time</id>
    <content type="html"><![CDATA[<p>ActiveSupport の日時計算はとても便利です。直感的な記法でスラスラ書けちゃいます。
でもハマるポイントもありますので注意してください。
というか昨日僕がやらかしたことの告白です。</p>

<p>下のコードを見てください。</p>

<pre><code class="ruby">t1 = Time.new(2012, 12, 1)

t2 = t1 + 1.day
t2 - t1 == 1.day # =&gt; true

t3 = t1 + 1.month
t3 - t1 == 1.month # =&gt; false
</code></pre>

<p>a = b + c だったら普通 a - b = c だろうと思うのですが、最後の式は false を返します。
なぜだかわかりますか？</p>

<!-- more -->


<p><code>t1</code> は 2012年1月1日ですから、<code>t3 = t1 + 1.month</code> によって <code>t3</code> には１か月後の 2012年2月1日が入ります。
具体的には
<a href="https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/date/calculations.rb#L108-L116">Date#advance</a>
の中で <code>Date#&gt;&gt;</code> を使って１か月後の日付が計算されています。</p>

<p><code>Time</code> インスタント間の引き算はふたつの時刻間の秒数を返します。
<code>t3 - t1</code> は 2012年1月1日から2012年2月1日までの秒数である <code>2678400.0</code> を返します。
これと <code>1.month</code> を比較するのですが、<code>1.month</code> は <code>30.days</code> つまり <code>2592000</code> 秒となります。</p>

<p>足す時は1ヶ月(2012年1月1日に足す場合は31日間)なのに、比較時は30日間と比較していたために等式が成り立たないということでした。
たしかに時刻差だけを与えられた場合、それが何ヶ月分かはわからないですよね。</p>

<p>month 以外の <code>Duration</code> である days, minutes, seconds では単位時間が常に同じであるため、このような症状はおきません。
year に関してはうるう年の時に同じ症状が発生します。</p>

<p>わかってしまえばなんともないが、知らないとハマりやすいポイントでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails の JavaScript (CoffeeScript) でローカライゼーションを簡単に]]></title>
    <link href="http://tkawachi.github.io/blog/2012/12/06/i18n-js/"/>
    <updated>2012-12-06T23:37:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2012/12/06/i18n-js</id>
    <content type="html"><![CDATA[<p>Rails 3.2 のプロジェクトで作業していて JavaScript (CoffeeScript) でのローカライゼーションをしたくなりました。
調べてみたところ <a href="https://github.com/fnando/i18n-js">i18n-js</a> が簡単につかえてよさそうな感じです。</p>

<p>まずは Gemfile に追加して <code>bundle install</code> 。</p>

<pre><code class="ruby Gemfile">gem "i18n-js"
</code></pre>

<p>続いて application.js に以下の行を追加。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require i18n
//= require i18n/translations
</code></pre>

<p>app/views/layouts/application.html.erb に以下の行を追加。
指定した言語で訳が存在しない時にデフォルト言語の訳を参照したいので <code>I18n.fallbacks = true;</code> を指定しています。</p>

<p>&#8220;` erb app/views/layouts/application.html.erb</p>

<script type="text/javascript">
    I18n.defaultLocale = "<%= I18n.default_locale %>";
    I18n.locale = "<%= I18n.locale %>";
    I18n.fallbacks = true;
</script>


<pre><code>
最後に `rake i18n:js:setup` を実行すると `config/i18n-js.yml` が生成されます。

これで `config/locales/*.yml` に書いてある Rails (Ruby) 側で利用できる情報と同じものが利用できるようになります。

ローカライゼーションは `I18n.t()` 関数で実行します。
</code></pre>

<p>I18n.t(&ldquo;hello&rdquo;);
&#8220;`</p>

<p>デフォルト値を指定したい場合はこんな感じ。</p>

<pre><code class="javascript">I18n.t("hello", {defaultValue: "こんちは"});
</code></pre>

<p>便利に使わせていただきます。</p>
]]></content>
  </entry>
  
</feed>
