<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DesignPattern | tkawachi Blog]]></title>
  <link href="http://tkawachi.github.io/blog/categories/designpattern/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.io/"/>
  <updated>2013-11-23T22:08:26+09:00</updated>
  <id>http://tkawachi.github.io/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord のモデルを整理する7つのパターン]]></title>
    <link href="http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern/"/>
    <updated>2013-09-21T21:18:00+09:00</updated>
    <id>http://tkawachi.github.io/blog/2013/09/21/active-model-7-pattern</id>
    <content type="html"><![CDATA[<p><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a>
という記事があり、読もう読もうと思いつつ1年くらい経ってしまった。
ようやく読んだので理解した内容を書いておく。
コード例は元記事のもの。</p>

<!-- more -->


<p>Rails で thin controller, fat model を心がけていると、model がマジで激太りしてヤバくなる。
実際に自分が仕事で書いている rails アプリも激太りしててヤバい。
この blog の筆者が作っている <a href="https://codeclimate.com/">CodeClimate</a> で C 判定をもらう程度には肥満体型になっている。</p>

<h2>Mixinに抜き出さない!</h2>

<p>Model が太ってきた時に考えるのは <code>ActiveSupport::Concern</code> を使って感心事を抜き出して、Mixin にすることだと思う。
実際に手元のアプリでも <code>models/concerns/</code> なんていうディレクトリがあったりする。</p>

<p>でもこれはアンチパターン。
Mixin は継承と同じように複雑さを増す。
やってみると、さほど綺麗に分けられないんだよね。
記事では mixin はするな、と書いてある。</p>

<p>ここからがパターンの紹介。</p>

<h2>1. Value object の抽出</h2>

<p><a href="http://en.wikipedia.org/wiki/Value_object">Value object</a>
は値が等しければ等しいとされるようなオブジェクトで、だいたいは immutable。
この value object を抜き出して、関連するロジックを抜き出したクラスに移す。</p>

<p>どんなときに使うか？
属性に強く結びついたロジックがあるとき。</p>

<p>例として挙げられているのは、電話番号、お金など。
CodeClimate には AからF の値をとる <code>Rating</code> value object があるらしい。</p>

<pre><code>class Rating
  include Comparable

  def self.from_cost(cost)
    if cost &lt;= 2
      new("A")
    elsif cost &lt;= 4
      new("B")
    elsif cost &lt;= 8
      new("C")
    elsif cost &lt;= 16
      new("D")
    else
      new("F")
    end
  end

  def initialize(letter)
    @letter = letter
  end

  def better_than?(other)
    self &gt; other
  end

  def &lt;=&gt;(other)
    other.to_s &lt;=&gt; to_s
  end

  def hash
    @letter.hash
  end

  def eql?(other)
    to_s == other.to_s
  end

  def to_s
    @letter.to_s
  end
end
</code></pre>

<p><code>cost</code> から rating を計算するロジックと、比較ロジックがこのクラスに抜き出されている。
<code>#hash</code>, <code>#eql?</code> を定義しておくと、hash key として使うことができる。</p>

<p>ActiveRecord 側。
<code>rating</code> は DB に保存された値から計算される値みたい。</p>

<pre><code>class ConstantSnapshot &lt; ActiveRecord::Base
  # …

  def rating
    @rating ||= Rating.from_cost(cost)
  end
end
</code></pre>

<p>Value object として抜き出せるものがあれば、間違いなく抜き出したほうがいいね。</p>

<h2>2. Service object の抽出</h2>

<p>以下の基準の１つ以上に合致したときには service object の抜き出しを薦めている。</p>

<ul>
<li>アクションが複雑なとき</li>
<li>アクションが複数のモデルに触るとき</li>
<li>アクションが外部サービスとやりとりするとき</li>
<li>アクションがモデルの主な関心事ではないとき</li>
<li>アクションを実行するのにいくつもの方法があるとき（GoFのストラテジパターン）</li>
</ul>


<p>以下の例はユーザ認証を行う service object。</p>

<pre><code>class UserAuthenticator
  def initialize(user)
    @user = user
  end

  def authenticate(unencrypted_password)
    return false unless @user

    if BCrypt::Password.new(@user.password_digest) == unencrypted_password
      @user
    else
      false
    end
  end
end
</code></pre>

<p>ここで <code>user</code> がモデルで、認証というアクションを service object として抽出している。</p>

<p>結局のところ「複雑なメソッド（群）を見つけたら別のクラスにしましょう」ということかな。</p>

<h2>3. Form object の抽出</h2>

<p>フォームの submit で複数のモデルが更新される場合などに使うパターン。
以下の例は <code>User</code> と <code>Company</code> の両方を更新する。</p>

<pre><code>class Signup
  include Virtus

  extend ActiveModel::Naming
  include ActiveModel::Conversion
  include ActiveModel::Validations

  attr_reader :user
  attr_reader :company

  attribute :name, String
  attribute :company_name, String
  attribute :email, String

  validates :email, presence: true
  # … more validations …

  # Forms are never themselves persisted
  def persisted?
    false
  end

  def save
    if valid?
      persist!
      true
    else
      false
    end
  end

private

  def persist!
    @company = Company.create!(name: company_name)
    @user = @company.users.create!(name: name, email: email)
  end
end
</code></pre>

<p><code>Signup</code> クラスは <a href="https://github.com/solnic/virtus">Virtus</a> を使うことで、
ActiveModel のように属性を持つことができる。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Naming.html"><code>ActiveModel::Naming</code></a>と
<a href="http://api.rubyonrails.org/classes/ActiveModel/Conversion.html"><code>ActiveModel::Conversion</code></a>は、つけとくと良いことがあるみたい。
<a href="http://api.rubyonrails.org/classes/ActiveModel/Validations.html"><code>ActiveModel::Validations</code></a> を include することで validation も掛けられる。</p>

<h2>4. Query object の抽出</h2>

<p>複雑なクエリを発行するときは query object を使うといいかも。
放置されたアカウントを探す query object の例。</p>

<pre><code>class AbandonedTrialQuery
  def initialize(relation = Account.scoped)
    @relation = relation
  end

  def find_each(&amp;block)
    @relation.
      where(plan: nil, invites_count: 0).
      find_each(&amp;block)
  end
end
</code></pre>

<p>コンストラクタに渡されているのは <code>ActiveRecord::Relation</code> のインスタンス。
他の条件がついた relation を渡すと、クエリを組み立てることができる。</p>

<pre><code>old_accounts = Account.where("created_at &lt; ?", 1.month.ago)
old_abandoned_trials = AbandonedTrialQuery.new(old_accounts)
</code></pre>

<p>この手のクラスは隔離した状態でのテストを頑張らず、DBにアクセスする形でテストしたほうがいい。</p>

<h2>5. View object の導入</h2>

<p>表示に限ったロジックを書いている場合には、それを抜き出すことを考える。
「もし別のインターフェース（例えば音声コントロールのUI）を実装するときに必要かな？」と考えて No なら view object が向いてる。
以下は Code Climate のドーナツチャートの例。</p>

<pre><code>class DonutChart
  def initialize(snapshot)
    @snapshot = snapshot
  end

  def cache_key
    @snapshot.id.to_s
  end

  def data
    # pull data from @snapshot and turn it into a JSON structure
  end
end
</code></pre>

<h2>6. Policy object の抽出</h2>

<p>読み込みポリシーに特化したオブジェクト。
ビジネスルールをひとつカプセル化する。</p>

<p>Service object に似ているが、service object は操作、 policy object は読み込みを担当。
Query object にも似ているが、query object は SQL 発行、 policy object はメモリ上のドメインモデル読み込みを担当する。</p>

<pre><code>class ActiveUserPolicy
  def initialize(user)
    @user = user
  end

  def active?
    @user.email_confirmed? &amp;&amp;
    @user.last_login_at &gt; 14.days.ago
  end
end
</code></pre>

<p>上記の例は、だれが &ldquo;active?&rdquo; か、という定義を与えている。</p>

<h2>7. Decorator の抽出</h2>

<p>既存の機能の上に機能を足したいときに使うパターン。
たとえばコメント書き込み時に、Facebook wall へもポストするような時に使う。</p>

<pre><code>class FacebookCommentNotifier
  def initialize(comment)
    @comment = comment
  end

  def save
    @comment.save &amp;&amp; post_to_wall
  end

private

  def post_to_wall
    Facebook.post(title: @comment.title, user: @comment.author)
  end
end
</code></pre>
]]></content>
  </entry>
  
</feed>
