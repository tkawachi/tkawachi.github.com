<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tkawachi Blog]]></title>
  <link href="http://tkawachi.github.com/atom.xml" rel="self"/>
  <link href="http://tkawachi.github.com/"/>
  <updated>2013-05-08T14:38:50+09:00</updated>
  <id>http://tkawachi.github.com/</id>
  <author>
    <name><![CDATA[KAWACHI Takashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでTypeScript、再び]]></title>
    <link href="http://tkawachi.github.com/blog/2013/04/25/typescript-and-rails-again/"/>
    <updated>2013-04-25T23:22:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/04/25/typescript-and-rails-again</id>
    <content type="html"><![CDATA[<p>Google で typescript rails と検索すると去年12月に書いた「<a href="http://tkawachi.github.io/blog/2012/12/09/trying-typescript-rails-out/">Rails で TypeScript を動かそうとして失敗した記録</a>」というエントリが2番目に出てくる日々が続いている。
「TypeScriptをRailsで使いたい」と思った人たちは、検索結果を見て、ああ動かないのかと思うのだろう。</p>

<p>あれから状況は少しだけ改善した。
typescript-rails gem で <code>/// &lt;reference&gt;</code> が一部使えるようになった。
というか使えるようにする <a href="https://github.com/klaustopher/typescript-rails/pull/6">patch</a> を出した。</p>

<p>この patch により、<code>node</code> コマンドをインストールしてあることが前提になったので注意されたし。</p>

<p>サンプルを作ろうと思い
<a href="https://github.com/tkawachi/typescript-rails-sample/blob/051838b7/app/assets/javascripts/test.js.ts.erb">test.js.ts.erb</a>
を書いてみた。
<code>.js.ts</code> ファイルや <code>.d.ts</code> ファイルを参照できるようになっていることがわかると思う。
サンプル内でやっているように <code>jquery.d.ts</code> を参照して、 jQuery も使えるようになった。</p>

<p>一方で以下の問題が残っている。
TypeScript compiler に渡る際に違うディレクトリにコピーされるため、参照先を絶対パスで指定している。そのため <code>.erb</code> suffix を付ける必要がある。
また参照先の拡張子が <code>.js.ts</code>, <code>.d.ts</code> ならば大丈夫だが <code>.js.ts.erb</code> の場合、compiler が参照してくれない。</p>

<p>これらの問題を解消しないとちょっと本格利用はできないかなあ。
また時間がとれたらなんとかしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使わないと損なバックエンドサービス]]></title>
    <link href="http://tkawachi.github.com/blog/2013/02/17/backend-services/"/>
    <updated>2013-02-17T18:47:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/02/17/backend-services</id>
    <content type="html"><![CDATA[<p><a href="http://slash7.com/company/">slash7</a> の Thomas Fuchs さんが自分たちのサービス
<a href="http://mir.aculo.us/2013/02/16/running-a-saas-here-are-some-services-youll-find-useful/">Freckle で使っている有償サービス群を紹介</a>している。
小さいチームでは自分のビジネスのコアに集中し、それ以外の部分に力を分散させるべからずというのはまさにその通り。</p>

<p>紹介されていたサービスは以下のとおり。
知らないサービスもいくつかあるなあ。</p>

<!-- more -->


<ul>
<li><a href="http://beta.travis-ci.com/">Travis Pro</a>
(<a href="http://about.travis-ci.org/docs/user/travis-pro/">ドキュメント</a>)
CI(継続的インテグレーション)サービス。
Open source 製品は Pro じゃない方が使える。</li>
<li><a href="http://newrelic.com/">NewRelic</a> 性能監視サービス。これは僕も使ってる。</li>
<li><a href="https://postmarkapp.com/">Postmark</a> メール配送サービス。メールを送るならマスト、らしい。メール受信もできるらしい。
同種のサービスは<a href="http://socialcompare.com/en/comparison/transactional-emailing-providers-mailjet-sendgrid-critsend">沢山ある</a>。
例えば<a href="http://sendgrid.com/">SendGrid</a>。</li>
<li><a href="https://www.honeybadger.io/">Honeybadger</a> Rails用のエラー管理ツール。
僕は <a href="http://www.exceptional.io/">Exceptional.io</a> を使っている。</li>
<li><a href="http://docraptor.com/">DocRaptor</a> HTML から PDF を生成するツール。請求書ダウンロードで使っているらしい。</li>
<li><a href="https://logentries.com/">Logentries</a> Log管理サービス。
複数サーバのログが同じ時系列で見える。検索可能。
同種のサービスに <a href="http://loggly.com/">Loggly</a> がある。</li>
<li><a href="http://www.dome9.com/">Dome9</a> ファイアウォール設定サービス。
iptablesでごにょごにょしなくてもいいらしい。</li>
<li><a href="http://webmon.com/">Webmon</a> と <a href="https://www.pingdom.com/">pingdom</a>。
サービスの可用性を測るサービス。
pingdom のほうは<a href="http://status.letsfreckle.com/">こういうステータス表示</a>もできるようだ。</li>
<li><a href="https://deadmanssnitch.com/">Dead Man’s Snitch</a> Cron が走ってなかったらメールしてくれるサービス。</li>
<li><a href="http://www.pagerduty.com/">PagerDuty</a> アラートを集めてメールなどで通知するサービス。
同種のサービスに<a href="http://www.opsgenie.com/">OpsGenie</a>。</li>
<li><a href="https://www.tinfoilsecurity.com/">Tinfoil</a> と <a href="https://www.trustwave.com/">Trustwave</a>。
セキュリティをチェックし、脆弱性がある場合に教えてくれるサービス。</li>
<li><a href="http://www.kissmetrics.com/">KISSmetrics</a>。メトリックスおよびイベントトラッキングサービス。</li>
<li><a href="http://customer.io/">Customer.io</a> お知らせメール送信サービス。最近きてない人だけに送るなんてことができる。</li>
</ul>


<p>すでに適正価格でやってくれるサービスがある場合、それを使わないで自分で作るのは馬鹿げています。使えるものは使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情熱の持ち方・燃やし方？]]></title>
    <link href="http://tkawachi.github.com/blog/2013/02/11/passion-study/"/>
    <updated>2013-02-11T22:28:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/02/11/passion-study</id>
    <content type="html"><![CDATA[<p>情熱が燃えていない。
結婚して子どもができ幸せであるが、今ひとつのめり込めるものがない。
好きなものはある。プログラミングが好きだ。
しかし覚えたての学生時代ほど燃えてはいない。
その他に趣味といえる趣味はない。</p>

<!-- more -->


<p>大学では様々なことを教えてくれる。
教授の中には情熱的な人が多かったが、情熱の持ち方・情熱の燃やし方については教えてもらった記憶が無い。
情熱の持ち方、燃やし方について教えてくれる人や場があってもいいんじゃないか？
いや、きっと自分が知らないだけで、あるに違いない。</p>

<p>世の中に同じような人は多いのではないだろうか？
情熱を燃やせば人生もっと楽しくなる人が、日本中にいるのではなかろうか。</p>

<p>現時点で解決したい事項を書いておく。</p>

<ul>
<li>情熱をもつにあたり必要な内部条件・外部条件はなにか？</li>
<li>体系的な情熱の燃やし方はあるか？</li>
<li>情熱が燃えている時と燃えていない時の判断することはできるか？</li>
</ul>


<p>まずは書籍を当たろうと Amazon で検索したところ、
<a href="http://www.amazon.co.jp/gp/product/4479793577/">情熱のスイッチ</a>
の内容が近そうである。とりあえずポチった。
なにかヒントが得られるだろうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryのDeferredとPromise]]></title>
    <link href="http://tkawachi.github.com/blog/2013/01/06/jquery-deferred/"/>
    <updated>2013-01-06T00:44:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/01/06/jquery-deferred</id>
    <content type="html"><![CDATA[<p>JavaScript(というか CoffeeScript)って90年代にブラウザ上で使われていた頃のイメージが拭えず、どうも気持ち悪くて逃げて回ってたんですが、事情があって最近は渋々書いてます。
JavaScripterの皆様にとっては何を今更だとは思いますが <a href="http://qiita.com/items/3d1cf51d7ae91305eaaa">jQuery.Deferredを使って楽しい非同期生活を送る方法</a> を読んで Deferred 便利だな、と思ったので理解したところをメモしておきます。</p>

<!-- more -->


<h2>利用シーン</h2>

<ul>
<li><code>$.get()</code> ってエラーハンドリングできないのか。使えないなー。と思ったとき</li>
<li>複数の AJAX リクエスト(などの非同期処理)を同時に開始して、全部終わったら何かしたいとき。</li>
</ul>


<h2>Deferred object</h2>

<p>キーになるのは
<a href="http://api.jquery.com/category/deferred-object/">Deferred object</a>
です。</p>

<h3>状態</h3>

<p>Deferred object は状態を持ちます。状態は３つのうちいずれか。</p>

<ol>
<li>未解決(unresolved)</li>
<li>解決済み(resolved)</li>
<li>拒否済み(rejected)</li>
</ol>


<p>実装によってはいろいろ呼び名があるみたいですが、jQuery では上のように呼ばれています。
jQuery以外の、例えば CommonJS の
<a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A</a>
では unfulfilled, fulfilled, failed がそれぞれの状態に対応します。</p>

<p>状態の遷移は「未解決→解決済み」「未解決→拒否済み」の二種類だけです。
一度、解決済みや拒否済みになったら未解決に戻ったりしませんし、解決済みから拒否済みへ遷移したりもしません。</p>

<h2>利用者</h2>

<p>このオブジェクトの利用者は</p>

<ul>
<li>a: 非同期処理をする人</li>
<li>b: 非同期処理の結果を受ける人</li>
</ul>


<p>の２人です。
aさんが状態遷移を担当し、bさんがそれに応じて処理を行う役割です。</p>

<p>Deferred object はaさんからbさんへ提供されますが、大抵の場合は Deferred の機能制限版である
<a href="http://api.jquery.com/Types/#Promise">Promise object</a>
が bさんに渡されます。
状態遷移を起こすのはaさん担当で、bさんがそれをしてはまずいので、Promiseでは状態遷移関連のメソッドが取り除かれています。
Promise は Deferred の <code>.promise()</code> メソッドで得られます。</p>

<p>非同期処理の関数コール時の戻り値として a から b に Promise object が渡されます。
処理が終わったら結果を渡すから約束手形(Promise)をもっておいてくれ、というわけですね。</p>

<h2>解決または拒否へ</h2>

<p>aさんは非同期処理が終わったら約束通り結果を渡します。
引数に処理結果を渡して<code>.resolve()</code> メソッドを呼び出すことで、解決済み状態へ遷移します。</p>

<p>処理が失敗に終わった場合には <code>.reject()</code> を呼びます。</p>

<h2>約束手形(Promise)の使い方</h2>

<p>書いてて思ったのですが、約束手形は一定の期日に支払いをする約束であるのに対して、Promise はいつ処理が完了するかわからないので少し違いました。
どちらかというとカイジの
<a href="http://fukumoto.lsx3.net/?%CC%DB%BC%A8%CF%BF%2F%CD%F8%BA%AC%C0%EE%B9%AC%CD%BA#b1869786">その気になれば10年後20年後ということも可能だろう</a>
という大金の引換券に似ています。</p>

<p>ともあれ、Promise はその時点では結果が出ていないので、すぐに結果を利用することができません。
代わりに callback を登録しておくことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 解決済みになったら呼ばれる callback を登録</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="nx">data</span><span class="err">は処理結果</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// 拒否済みになったら呼ばれる callback を登録</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="err">エラー処理</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// 解決済みもしくは拒否済みになったら呼ばれる callback を登録</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="err">処理</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>callback 複数登録する事ができ、登録した順に呼ばれます。例えば <code>done()</code> を複数回呼び出して解決済みになったときの callback を複数個登録することができます。</p>

<p><code>done()</code>, <code>fail()</code>, <code>always()</code> は Deferred の場合は Deferred, Promise の場合は Promise を返すので、method chain でつなげることができます。</p>

<h2>約束の組み合せ</h2>

<p>受け取った Promise/Deferred は <code>$.when()</code> で組み合わせることができます。
組み合わせると、渡したものすべてが解決済みになったときに解決済みになる Promise が返されます。
組み合せにより、複数の非同期処理がすべて完了したら何かを実行することができます。</p>

<p>組み合わせた場合、 callback の引数に渡される結果も増えます。
以下のコードで d1, d2 にはそれぞれ promise1, promise2 の結果が渡されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">promise1</span><span class="p">,</span> <span class="nx">promise2</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d1</span><span class="p">,</span> <span class="nx">d2</span><span class="p">)</span> <span class="p">{</span> <span class="err">…</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$.when()</code> に Defered でも Promise でもない値を渡した場合、解決済みの値として扱われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">promise</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d1</span><span class="p">,</span> <span class="nx">d2</span><span class="p">)</span> <span class="p">{</span> <span class="err">…</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>などとした場合、10は解決済みと見なされ、<code>promise</code>が解決済みになり次第、<code>d1</code> に 10 が渡されて callback が実行されます。</p>

<h2>$.ajax の戻り値は Promise</h2>

<p><code>$.ajax</code>, <code>$.get</code>, <code>$.post</code> など AJAX 関数群の戻り値 jqXHR は Promise と同じインタフェースを備えています。
すなわち <code>$.when</code> を使って、複数の AJAX 通信がすべて完了したら次に…をするといったコードが簡潔に書けます。</p>

<p>また <code>$.get</code> などはエラーコールバックを引数に取れませんが、戻り値は Promise ですので、これに <code>.fail()</code> を呼び出すことでエラーコールバックを登録することができます。
今まで使えない子だと思っていたのですが、僕が知らないだけでずっと前に使える子になってたんですね。</p>

<h2>まとめ</h2>

<p>なんだか長くなってしまった。まとめ。</p>

<ul>
<li>Deferred は３状態をもつ</li>
<li>解決済み、拒否済みになった時に実行するコールバックを登録できる</li>
<li>Promise は Deferred の機能制限版 (結果をもらう人向け)</li>
<li><code>$.when</code> で Deferred/Promise を組み合せられる</li>
<li><code>$.ajax</code>, <code>$.get</code>, etc. の戻り値は Promise</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew RMagick]]></title>
    <link href="http://tkawachi.github.com/blog/2013/01/05/homebrew-rmagick/"/>
    <updated>2013-01-05T14:38:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/01/05/homebrew-rmagick</id>
    <content type="html"><![CDATA[<p>Homebrew で ImageMagick をインストールして RVM 環境の ruby に rmagick gem を入れようとしたら意外に苦労したのでメモ。</p>

<!-- more -->


<p>最終的な手順</p>

<ol>
<li><code>brew update</code></li>
<li><code>brew install ghostscript imagemagick</code></li>
<li><code>ln -s /usr/local/lib/libMagickCore-Q16.dylib /usr/local/lib/libMagickCore.dylib</code></li>
<li><code>gem install rmagick</code></li>
<li><code>rm /usr/local/lib/libMagickCore.dylib</code></li>
</ol>


<p>ハマりポイント</p>

<ul>
<li>brew では <code>MagickCore-Q16</code> という名前でライブラリがインストールされる。
RMagick の <a href="https://github.com/rmagick/rmagick/blob/master/ext/RMagick/extconf.rb#L207">extconf.rb</a> では <code>MagickCore</code>, <code>Magick</code>, <code>Magick++</code> という
名前でライブラリの存在を確認しているため、ここで落ちる。
<code>-Q16</code> ってなんじゃ！

<ul>
<li>→ <code>/usr/local/lib/libMagickCore.dylib</code> に symlink しちゃう。
<code>MagickCore</code>, <code>Magick</code>, <code>Magick++</code> のうち一つだけあればチェックは通るので
<code>libMagickCore.dylib</code> だけで OK。
また gem のインストールが終わったら不要なので symlink 消しとく。</li>
</ul>
</li>
<li>rmagick gem のインストールが途中で止まる。ghostscript 入ってないと途中で止まるっぽい。。

<ul>
<li>→ brew で ghostscript も入れる。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootswatchのテーマをtwitter-bootstrap-railsで使う]]></title>
    <link href="http://tkawachi.github.com/blog/2013/01/04/use-bootswatch-with-rails/"/>
    <updated>2013-01-04T18:12:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2013/01/04/use-bootswatch-with-rails</id>
    <content type="html"><![CDATA[<p>美的センスに乏しい私のようなプログラマにとってTwitter bootstrapが便利なことは言うまでもありませんが、知っている人には一見して「あ、Bootstrapだ」とわかるサイトになってしまいます。
これ自体は別に悪いことはないと思うのですが、他のサイトと見分けの付かないサイトになってしまうのは良くないですよね。</p>

<p>そこでbootstrap用のテーマを入れよう、となるわけです。
テーマを入れることで色・フォントなどが変更されるので、bootstrap臭が軽減されます。</p>

<p>bootstrap theme などで検索すると有償・無償を含めテーマを取り扱っているサイトが見つかると思いますが、今回は <a href="http://bootswatch.com/">Bootswatch</a> を twitter-bootstrap-rails と共に使う方法をメモします。
bootstrap-sass, sass-twitter-bootstrap, less-rails-bootstrap の人は別の方法があると思います。</p>

<!-- more -->


<p>まず <a href="http://bootswatch.com/#gallery">Bootswatch の Gallery</a> から使いたいテーマを選びます。
<code>vendor/assets/stylesheets/bootswatch/</code> ディレクトリを作り、選んだテーマの Download ボタンから <code>variables.less</code> と <code>bootswatch.less</code> をダウンロードして、このディレクトリに保存します。</p>

<p><code>app/assets/stylesheets/</code> ではなく <code>vendor/assets/stylesheets/</code> 以下に <code>bootswatch</code> ディレクトリを作成して保存します。
なぜなら <code>app/assets/stylesheets/application.css.scss</code> にはデフォルトで <code>*= require_tree .</code> という行があり、<code>app/assets/stylesheets/</code> 以下にある <code>.less</code> ファイルはすべて require されてしまうからです。
<code>variables.less</code>, <code>bootswatch.less</code> は <code>@import</code> するものであって、require するとエラーになります。
それに <code>vendor</code> というのはサードパーティ製のアレヤコレヤを置くところなので、きっとこっちが正解でしょう。</p>

<p>あとは <code>bootstrap_and_overrides.css.less</code> で <code>@import “twitter/bootstrap/responsive”;</code> の行のあとに以下の２行を付け足します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import “bootswatch/variables.less”;
</span><span class='line'>@import “bootswatch/bootswatch.less”;</span></code></pre></td></tr></table></div></figure>


<p>これでいける(少なくとも僕は使えてる)と思うんですが、ダメだったら教えて下さい。</p>

<p>参考</p>

<ul>
<li><a href="http://bobonrails.com/post/29340795516/customizing-twitter-bootstrap-on-rails-3">Customizing Twitter Bootstrap On Rails 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lisp Package Archive]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/31/emacs-lisp-package-archive/"/>
    <updated>2012-12-31T23:16:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/31/emacs-lisp-package-archive</id>
    <content type="html"><![CDATA[<p>Macでの日本語の文書を読み書きするテキストエディタを探していた。
Facebookでつぶやいていたらいろいろおすすめをいただいたのだが、これだ！！というものがなかった。
それで Emacs に戻ろうと思った。</p>

<p>ほぼ三年弱ぶりくらいに Emacs に戻ってきたのだが
<a href="http://emacswiki.org/emacs/ELPA">ELPA</a>
というパッケージマネージャがデフォルトで付いてきていて、ものすごく導入障壁が下がっていたのでメモしておく。</p>

<!-- more -->


<p>Mac OS X なので Emacs 自体は
<a href="http://emacsformacosx.com/">Emacs For Mac OS X</a>
からダウンロードした。
他のアプリと同じようにインストールできる。簡単。</p>

<p>おもむろに <code>M-x list-packages</code> とこんな画面が出てくる。</p>

<p><img src="http://tkawachi.github.com/images/20121231/list-packages.png" alt="M-x list-packages" /></p>

<p>青い下線があるところに移動して return を押すとこんなかんじでパッケージの説明が出てくる。</p>

<p><img src="http://tkawachi.github.com/images/20121231/show.png" alt="M-x list-packages" /></p>

<p>あとは <code>Install</code> と書かれているところに移動して return を押せばインストールが完了する。
簡単！</p>

<p>いくつか公開レポジトリがあるらしく以下のように設定しておけば複数のレポジトリからパッケージがインストールできる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
</span><span class='line'>                           ("marmalade" . "http://marmalade-repo.org/packages/")
</span><span class='line'>                           ("melpa" . "http://melpa.milkbox.net/packages/")))</span></code></pre></td></tr></table></div></figure>


<p>上の３つを入れた状態で <code>list-packages</code> すると現時点で 1000 程度のパッケージがリストされる。
これからもっと増えていくだろう。</p>

<p>perl でいうところの CPAN が Emacs にできたということだ。素晴らしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails で TypeScript を動かそうとして失敗した記録]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/09/trying-typescript-rails-out/"/>
    <updated>2012-12-09T11:27:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/09/trying-typescript-rails-out</id>
    <content type="html"><![CDATA[<p>Microsoft 発の型付き JavaScript こと TypeScript が人気ですね。
<a href="https://github.com/klaustopher/typescript-rails">typescript-rails</a> という gem があったので、動くのか試してみました。</p>

<p>結論から言っておくと、他のスクリプトやライブラリを参照する TypeScript をコンパイルすることが今回はできませんでした。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rails new typescript-rails-test -T
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;gem &quot;typescript-rails&quot;&#39;</span> &gt;&gt; Gemfile
</span><span class='line'><span class="nv">$ </span>bundle
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rails g controller <span class="nb">test </span>index
</span><span class='line'>      create  app/controllers/test_controller.rb
</span><span class='line'>       route  get <span class="s2">&quot;test/index&quot;</span>
</span><span class='line'>      invoke  erb
</span><span class='line'>      create    app/views/test
</span><span class='line'>      create    app/views/test/index.html.erb
</span><span class='line'>      invoke  helper
</span><span class='line'>      create    app/helpers/test_helper.rb
</span><span class='line'>      invoke  assets
</span><span class='line'>      invoke    coffee
</span><span class='line'>      create      app/assets/javascripts/test.js.coffee
</span><span class='line'>      invoke    scss
</span><span class='line'>      create      app/assets/stylesheets/test.css.scss
</span><span class='line'><span class="nv">$ </span>rm app/assets/javascripts/test.js.coffee
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;alert(&quot;Hello TypeScript&quot;)&#39;</span> &gt; app/assets/javascripts/test.js.ts
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rails s
</span></code></pre></td></tr></table></div></figure>


<p>これで http://localhost:3000/test/index にアクセスすると、正しく alert が表示される。
いいぞ。</p>

<p>次に JQuery が使ってみたい。</p>

<figure class='code'><figcaption><span>app/assets/javascripts/test.js.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;document ready&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>うーむ。エラーがおきた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>SyntaxError: (4,1): The name &#39;$&#39; does not exist in the current scope
</span><span class='line'>  (in /Users/kawachi/gitworks/typescript-rails-test/app/assets/javascripts/test.js.ts)
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/klaustopher/typescript-rails/issues/5">Issue #5</a>
に報告されている問題と同一。
<code>/// &lt;reference path="jquery.d.ts" /&gt;</code> という行をいれて <code>$</code> の存在を TypeScript compiler に知らしめねばならないらしいが、これが今のところできないようだ。</p>

<p><a href="https://github.com/TimothyKlim/typescript-ruby/issues/1">https://github.com/TimothyKlim/typescript-ruby/issues/1</a>
によれば、compiler 内の IO class が利用している CommonJS の機能を ExecJS が隠してしまっているのが原因とのこと。
ExecJS を経由せずに直接 Node.js を叩けばいいのでは、と。</p>

<p>これが ExecJS から node を叩くときにソースコードをラッピングするものだが、
よく見ると module, exports, require, console が undefined にされていることがわかる。(<code>result = program();</code> のところで引数に何も渡されていない)
隠されている CommonJS の機能とはきっとこのことを言っているのだろう。</p>

<figure class='code'><figcaption><span>execjs/support/node_runner.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">program</span><span class="p">,</span> <span class="nx">execJS</span><span class="p">)</span> <span class="p">{</span> <span class="nx">execJS</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">require</span><span class="p">,</span> <span class="nx">console</span><span class="p">)</span> <span class="p">{</span> <span class="err">#</span><span class="p">{</span><span class="nx">source</span><span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">print</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span> <span class="o">=</span> <span class="nx">program</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">result</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">result</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">print</span><span class="p">(</span><span class="s1">&#39;[&quot;ok&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([</span><span class="s1">&#39;ok&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">]));</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">print</span><span class="p">(</span><span class="s1">&#39;[&quot;err&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([</span><span class="s1">&#39;err&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">]));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/sstephenson/execjs/issues/91">このへん</a>
をみると ExecJS の作者は、副作用を与えるこれらの機能を ExecJS に取り込むつもりは毛頭ないようだ。</p>

<p>上のコードを手元で少し書き換えて module, exports, require を書き潰さないようにしてみたが、やはり同じエラーが出た。
ということは、これらの関数が undefined になっていることが直接の理由ではないということか。</p>

<p><a href="http://vividcode.hatenablog.com/entry/ts/run-on-rhino">JavaScript 処理系 Rhino で TypeScript コンパイラのビルドを試してみた</a>
によると TypeScript がサポートしているのは Node.js と JScript だけなので、Node.js の存在を前提として TypeScript compiler を動かすモジュール作ったほうが早そうな感じ。</p>

<p>時間が取れたら作りたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupport 日時計算の罠]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/08/a-trap-of-active-support-time/"/>
    <updated>2012-12-08T11:03:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/08/a-trap-of-active-support-time</id>
    <content type="html"><![CDATA[<p>ActiveSupport の日時計算はとても便利です。直感的な記法でスラスラ書けちゃいます。
でもハマるポイントもありますので注意してください。
というか昨日僕がやらかしたことの告白です。</p>

<p>下のコードを見てください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">t1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span>
</span><span class='line'><span class="n">t2</span> <span class="o">-</span> <span class="n">t1</span> <span class="o">==</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">t3</span> <span class="o">=</span> <span class="n">t1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span>
</span><span class='line'><span class="n">t3</span> <span class="o">-</span> <span class="n">t1</span> <span class="o">==</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>a = b + c だったら普通 a - b = c だろうと思うのですが、最後の式は false を返します。
なぜだかわかりますか？</p>

<!-- more -->


<p><code>t1</code> は 2012年1月1日ですから、<code>t3 = t1 + 1.month</code> によって <code>t3</code> には１か月後の 2012年2月1日が入ります。
具体的には
<a href="https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/date/calculations.rb#L108-L116">Date#advance</a>
の中で <code>Date#&gt;&gt;</code> を使って１か月後の日付が計算されています。</p>

<p><code>Time</code> インスタント間の引き算はふたつの時刻間の秒数を返します。
<code>t3 - t1</code> は 2012年1月1日から2012年2月1日までの秒数である <code>2678400.0</code> を返します。
これと <code>1.month</code> を比較するのですが、<code>1.month</code> は <code>30.days</code> つまり <code>2592000</code> 秒となります。</p>

<p>足す時は1ヶ月(2012年1月1日に足す場合は31日間)なのに、比較時は30日間と比較していたために等式が成り立たないということでした。
たしかに時刻差だけを与えられた場合、それが何ヶ月分かはわからないですよね。</p>

<p>month 以外の <code>Duration</code> である days, minutes, seconds では単位時間が常に同じであるため、このような症状はおきません。
year に関してはうるう年の時に同じ症状が発生します。</p>

<p>わかってしまえばなんともないが、知らないとハマりやすいポイントでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails の JavaScript (CoffeeScript) でローカライゼーションを簡単に]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/06/i18n-js/"/>
    <updated>2012-12-06T23:37:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/06/i18n-js</id>
    <content type="html"><![CDATA[<p>Rails 3.2 のプロジェクトで作業していて JavaScript (CoffeeScript) でのローカライゼーションをしたくなりました。
調べてみたところ <a href="https://github.com/fnando/i18n-js">i18n-js</a> が簡単につかえてよさそうな感じです。</p>

<p>まずは Gemfile に追加して <code>bundle install</code> 。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;i18n-js&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて application.js に以下の行を追加。</p>

<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require i18n</span>
</span><span class='line'><span class="c1">//= require i18n/translations</span>
</span></code></pre></td></tr></table></div></figure>


<p>app/views/layouts/application.html.erb に以下の行を追加。
指定した言語で訳が存在しない時にデフォルト言語の訳を参照したいので <code>I18n.fallbacks = true;</code> を指定しています。</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;script type=&quot;text/javascript&quot;&gt;</span>
</span><span class='line'><span class="x">    I18n.defaultLocale = &quot;</span><span class="cp">&lt;%=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span> <span class="cp">%&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">    I18n.locale = &quot;</span><span class="cp">&lt;%=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="cp">%&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">    I18n.fallbacks = true;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に <code>rake i18n:js:setup</code> を実行すると <code>config/i18n-js.yml</code> が生成されます。</p>

<p>これで <code>config/locales/*.yml</code> に書いてある Rails (Ruby) 側で利用できる情報と同じものが利用できるようになります。</p>

<p>ローカライゼーションは <code>I18n.t()</code> 関数で実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">I18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>デフォルト値を指定したい場合はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">I18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">defaultValue</span><span class="o">:</span> <span class="s2">&quot;こんちは&quot;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>便利に使わせていただきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress に Facebook recommendations bar を設置]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/02/facebook-recommendations-bar-for-octopress/"/>
    <updated>2012-12-02T10:18:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/02/facebook-recommendations-bar-for-octopress</id>
    <content type="html"><![CDATA[<p>この blog は
<a href="http://octopress.org/">Octopress</a> を使って github pages で書いています。</p>

<p>Facebook recommendations bar を追加してみました。
Facebook の <a href="https://developers.facebook.com/docs/reference/plugins/recommendationsbar/">Recommendations Bar</a>
のページから blog 用の Facebook application をひとつ作って、code snippet を吐き出します。</p>

<p>あとは
<a href="https://github.com/tkawachi/tkawachi.github.com/blob/31482db539e901af1f7f5af28d071e4a4a0c01e0/source/_layouts/post.html#L45-L53">このように</a>
<code>source/_layouts/post.html</code> を書き換えます。
Github pages だと何を変更したかも github で見られるのが嬉しいですね。</p>

<p>Blog の like 数が少なすぎるのでしょう。まだおすすめがちゃんと出ないようですが、 like 数が増えると出るようになるのでしょうか。</p>

<p><a href="http://sessan.hatenablog.com/entry/2012/09/27/172013">sessanの日記 - はてなブログにFacebookのRecommendations Barを設置する</a> を参考にしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook promoted posts]]></title>
    <link href="http://tkawachi.github.com/blog/2012/12/02/facebook-promoted-posts/"/>
    <updated>2012-12-02T01:54:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/12/02/facebook-promoted-posts</id>
    <content type="html"><![CDATA[<p>Facebook で投稿したときに右下に表示される「宣伝する」を試してみました。
大学時代の仲間内で作ったアプリをリリースしたのでそのお知らせということで。</p>

<p>「宣伝する」ボタンを押すとこんな画面が表示されます。</p>

<p><img src="http://tkawachi.github.com/images/20121202/payment1.png" alt="支払画面1" /></p>

<p>674円とのことです。
うーん。高いのか安いのか？
よくわかりませんが、何事も経験なので勉強代だと思ってクレジットカードを入力します。</p>

<p><img src="http://tkawachi.github.com/images/20121202/payment2.png" alt="支払画面2" /></p>

<p>どうやら 81 Facebookポイント を 674円で購入し、それを使って「大切な投稿を宣伝」を購入したようです。
1 Facebook ポイントは 8.32 円ですか。
キリが悪いように感じますが、為替相場を考えると 10 Facebook ポイントが $1 なのでしょう。</p>

<p>購入後しばらくは何も変化が感じられません。
結果が見えるようになるまで1日近くかかります。</p>

<p><img src="http://tkawachi.github.com/images/20121202/result.png" alt="結果表示" /></p>

<p>1日後くらいから上の画像のような結果が表示されます。
どうやら通常見られるより2倍以上の露出があったようです。</p>

<p>投稿からの流入だけではありませんが、投稿内に書いた
<a href="http://www.veronicasoft.com/AmbientPlayer">AmbientPlayer</a>
の紹介動画は72回再生がありました。</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/u0tryNRuYsQ "></iframe></div>


<p><a href="https://www.facebook.com/help/promote">Facebook のヘルプ</a>
によれば、そもそも自分の投稿の読者のみにしか表示されないことが書いてあります。
私のフレンド数がおおよそ180ですので、最大露出がこの程度なのでしょう。
今回の宣伝がフレンドの全域に行き渡ったと仮定すれば、普段の投稿の露出はこの半分程度になっていると言えます。</p>

<p>雑感ですが、「宣伝する」はあくまで露出を高めるだけで、それを見た人に何かしら訴えるのは投稿内容ですから、どれくらいアクションを起こしてもらえるかは投稿の内容が肝になりそうです。
が、大きな反響を呼ぶ投稿であれば「宣伝する」しなくても、ライクを集めタイムラインへの露出は増えるように思います。
もちろん露出を増幅する効果はあるでしょうが、効果は微妙かなという感じを私は受けました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating HTML from DocBook]]></title>
    <link href="http://tkawachi.github.com/blog/2012/11/19/generating-html-from-docbook/"/>
    <updated>2012-11-19T00:28:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/11/19/generating-html-from-docbook</id>
    <content type="html"><![CDATA[<p>これまで DocBook には縁がなかったのですが、とある DocBook 形式の .xml ファイルを HTML に変換したくなりました。
DocBook project で用意されている xslt を xlstproc コマンドであててあげれば良いようです。</p>

<p>今作業している MacOS X (Mountain Lion) には xsltproc が /usr/bin/ にインストールされているようです。
DocBook 用の xslt をインストールするのに Homebrew を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install docbook
</span><span class='line'><span class="nv">$ </span>xsltproc -o book.html <span class="se">\</span>
</span><span class='line'>  /usr/local/Cellar/docbook/5.0/docbook/xsl-ns/1.77.1/xhtml5/docbook.xsl <span class="se">\</span>
</span><span class='line'>  book.xml
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじで無事に book.xml から book.html を生成することができました。
DocBook って難しくて怖いイメージがあったんですが意外に簡単にでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAMユーザのS3アクセスをフォルダレベルで制限する]]></title>
    <link href="http://tkawachi.github.com/blog/2012/11/18/how-to-restrict-s3-for-folder-access/"/>
    <updated>2012-11-18T19:29:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/11/18/how-to-restrict-s3-for-folder-access</id>
    <content type="html"><![CDATA[<p>AWS の IAM でユーザを作り、S3 bucket の特定の path 以下にのみアクセスを与えるということを設定したかったのですが、情報を見つけられず時間をつかってしまったので共有しておきます。
(参考: <a href="https://forums.aws.amazon.com/message.jspa?messageID=245525">Giving a user permission to acceess just a folder within a bucket</a>)</p>

<p>現状 AWS では bucket 数上限が 100, IAM ユーザ数制限が 5000 になっています。
利用者1人に 1 IAM ユーザを発行すると 5000 人で使えるわけですが、
bucket 毎に共有設定を行った場合は 100 共有までです。
同一 bucket 内で path を切り替えて共有した場合は bucket 数上限は関係なくなるので嬉しい、というわけです。</p>

<p>まず最初に S3 の IAM policy に関するAWS の公式ドキュメントは
<a href="http://docs.amazonwebservices.com/AmazonS3/latest/dev/UsingIAMPolicies.html">Using IAM Policies</a>
です。
Bucket レベルの指定は arn:aws:s3:::bucket_name に対して行い、 object レベルの指定は arn:aws:s3:::bucket_name/key_name に対して行います。</p>

<p>同ページ内の Example 5: Allow a partner to drop files into a specific portion of the corporate bucket がやりたいこととほぼ同じ設定になります。</p>

<p>Object レベルの指定で path 以下にアクセスを制限したいときは * が使えます。
my_bucket bucket の shared/ 以下に s3:PutObject を許可するには、以下のような statement を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Effect":"Allow",
</span><span class='line'>  "Action":"s3:PutObject",
</span><span class='line'>  "Resource":"arn:aws:s3:::my_bucket/shared/*"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記は object レベルでの指定になります。
S3を利用するアプリケーションによっては object レベルの API だけではなく bucket レベルでの API も使うものがあります。</p>

<p>Bucket レベルの指定で path 以下にアクセスを制限したいときは Condition, StringLike を使います。
s3:ListBucket, s3:GetBucketLocation を許可するには、以下の様な statement を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Effect": "Allow",
</span><span class='line'>  "Action": ["s3:ListBucket", "s3:GetBucketLocation"],
</span><span class='line'>  "Resource": "arn:aws:s3:::my_bucket",
</span><span class='line'>  "Condition": {
</span><span class='line'>    "StringLike": {
</span><span class='line'>    "s3:prefix": "shared/*"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記の方法でアプリケーションが利用する API に応じて object レベル, bucket レベルの action を許可すれば、今回の目的が達成できます。</p>

<p>なお、S3 すべての action についてこれらの指定で動作することを検証したわけではないので、必要に応じてみなさまご確認ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending git revision to Exceptional.io]]></title>
    <link href="http://tkawachi.github.com/blog/2012/09/13/sending-git-revision-to-exceptional-dot-io/"/>
    <updated>2012-09-13T20:44:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/09/13/sending-git-revision-to-exceptional-dot-io</id>
    <content type="html"><![CDATA[<p><a href="https://www.exceptional.io">Exceptional.io</a> は Ruby アプリケーションで起きた例外を集約して管理するサービスだ。</p>

<p>例外が起きた時に困るのが、それってどのバージョンで起きたバグ？ってことがわからないこと。
日付が記録されているので調べればわからなくはないけど、面倒だよね。</p>

<p>Exceptional.io では付加情報を付け加えて送ることができるので、以下の utility class をつかって git の revision 情報を取得し、それを送るようにしてみた。</p>

<div><script src='https://gist.github.com/3713816.js'></script>
<noscript><pre><code># coding: UTF-8
class GitUtil
  class &lt;&lt; self
    # Current source code revision
    def revision
      rev = capistrano_revision
      rev = command_revision unless rev
      rev.try(:chomp)
    end

    private
    def capistrano_revision
      begin
        revision_file = &quot;#{Rails.root}/REVISION&quot;
        return File.read(revision_file) if File.exists? revision_file
      rescue IOError =&gt; e
        Rails.logger.info(e)
      end
      nil
    end

    def command_revision
      rev = `cd '#{Rails.root}' &amp;&amp; git rev-list --max-count=1 HEAD`
      $? == 0 ? rev : nil
    end
  end
end</code></pre></noscript></div>


<p>あとは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Exceptional</span><span class="o">.</span><span class="n">context</span><span class="p">({</span><span class="n">git_revision</span><span class="p">:</span> <span class="no">GitUtil</span><span class="o">.</span><span class="n">revision</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのコードを例外送出前に呼んでおくと、付加情報と共に送られていく。</p>

<p>これでどのコミットからどのコミットまで例外が起きてたかわかるようになった。便利便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open sources used by spotify]]></title>
    <link href="http://tkawachi.github.com/blog/2012/06/25/open-sources-used-by-spotify/"/>
    <updated>2012-06-25T00:49:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/06/25/open-sources-used-by-spotify</id>
    <content type="html"><![CDATA[<p>US などの iTunes store からダウンロードできる <a href="http://www.spotify.com/">Spotify</a> の iOS アプリの出来がとても良い。
アプリ内に用意されている Lisence のページを見ていたら、利用している open source ソフトウェアの一覧が並んでいたので、ちゃんと出来てるアプリに使われているものはきっとちゃんとしているだろうということでメモしておく。</p>

<ul>
<li><a href="http://www.boost.org/">Boost</a></li>
<li><a href="http://expat.sourceforge.net/">Expat</a></li>
<li><a href="http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible">FastDelegate</a> C++ の member function pointer に代わる何か？</li>
<li><a href="http://sourceforge.net/projects/giflib/">giflib</a> GIF</li>
<li><a href="http://libjpeg.sourceforge.net/">libjpeg</a> JPEG</li>
<li><a href="http://www.libpng.org/pub/png/libpng.html">libpng</a> PNG</li>
<li><a href="http://xiph.org/ogg/">libogg</a> Ogg</li>
<li><a href="http://xiph.org/vorbis/">libvorbis</a> Vorbis</li>
<li><a href="http://wss.co.uk/pinknoise/tremolo/">Tremolo</a> Tremolo is an ARM optimised version of the Tremor lib from xiph.org. For those that don&#8217;t know, the Tremor lib is an integer only library for doing Ogg Vorbis decompression.</li>
<li><a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html">Mersenne Twister</a> Mersenne Twister(以下MT)は、松本眞 ・西村拓士（アルファベット順）により1996年から1997年に渡って 開発された疑似乱数生成アルゴリズムです。</li>
<li><a href="https://ccrma.stanford.edu/software/snd/">Snd</a> Snd is a sound editor. Spotify では resampling にコードを流量。</li>
<li><a href="http://zlib.net/">zlib</a></li>
<li><a href="http://nsis.sourceforge.net/Main_Page">NSIS</a> Windows のインストーラ作成システム。</li>
<li><a href="http://sourceforge.net/projects/wtl/">Windows Template Library</a> Windows Template Library (WTL) is a C++ library for developing Windows applications and UI components. It extends ATL (Active Template Library) and provides a set of classes for controls, dialogs, frame windows, GDI objects, and more.</li>
<li><a href="http://growl.info/">Growl</a></li>
<li><a href="http://www.lua.org/">Lua</a></li>
<li><a href="http://programming.nu/index">Nu</a> Nu is an interpreted object-oriented language. Its syntax comes from Lisp, but Nu is semantically closer to Ruby than Lisp. Nu is implemented in Objective-C and is designed to take full advantange of the Objective-C runtime and the many mature class libraries written in Objective-C.</li>
<li><a href="http://stig.github.com/json-framework/">SBJSON</a></li>
<li><a href="http://allseeing-i.com/ASIHTTPRequest/">ASIHTTPRequest</a></li>
<li><a href="https://github.com/mikeash/MAObjCRuntime">MAObjCRuntime</a> MAObjCRuntime is an ObjC wrapper around the Objective-C runtime APIs. If that&#8217;s confusing, it provides a nice object-oriented interface around (some of) the C functions in /usr/include/objc.</li>
<li><a href="http://code.google.com/p/google-breakpad/">Google Breakpad</a> An open-source multi-platform crash reporting system</li>
<li><a href="http://zendold.lojcomm.com.br/icarousel/">iCarousel</a> iCarousel is an open source (free) javascript tool for creating carousel like widgets.</li>
<li><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a> MBProgressHUD is an iOS drop-in class that displays a translucent HUD with an indicator and/or labels while work is being done in a background thread</li>
<li><a href="https://github.com/kolinkrewinkel/KKGridView">KKGridView</a> High-performance iOS grid view (MIT license). iOS6 では iOS SDK に類似の view controller を入れたので不要に。</li>
<li><a href="https://github.com/robbiehanson/KissXML">KissXML</a> KissXML provides a drop-in replacement for Apple&#8217;s NSXML class culster in environments without NSXML (e.g. iOS).</li>
<li><a href="https://github.com/booyah/protobuf-objc">ProtobufObjc</a></li>
<li><a href="https://github.com/facebook/facebook-ios-sdk">Facebook</a></li>
<li><a href="http://www.chromium.org/">Chronium</a></li>
<li><a href="http://code.google.com/p/chromiumembedded/">CEF</a> The Chromium Embedded Framework (CEF) is an open source project founded by Marshall Greenblatt in 2008 to develop a Web browser control based on the Google Chromium project. CEF currently supports a range of programming languages and operating systems and can be easily integrated into both new and existing applications.</li>
</ul>


<p>Mac 版 Spotify のブラウザっぽいものは CEF なのかな。</p>

<p>Google Breakpad, Nu, MAObjCRuntime, KKGridView あたりはすぐ使うかも。要調査。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run rspec faster for Rails 3.1]]></title>
    <link href="http://tkawachi.github.com/blog/2012/01/22/run-rspec-faster-for-rails-3-dot-1/"/>
    <updated>2012-01-22T21:07:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/01/22/run-rspec-faster-for-rails-3-dot-1</id>
    <content type="html"><![CDATA[<p>個人プロジェクトで Rails 3.1 のアプリケーションを書いていたのだが、<code>rake spec</code> の
実行が遅くてイライラしていた。
1回の実行に 10 秒程度が掛かっていた。
テスト実行は 0.5 ms 以下で終了していたので、残りの 9.5 s 以上は framework の開始
などに費やされていると想像される。</p>

<p>この状態で皆が満足するはずが無いと思い、少し調べたところ
<a href="http://spork.rubyforge.org/">spork</a> が求めるもののようだ。
これはテスト用サーバを別プロセスで起動しておき、drb で rspec などによるテスト実行を
キックできるもののようだ。</p>

<p>また <a href="https://github.com/guard/guard-spork">guard-spork</a> を使えば、
spork を用いたテストの実行をファイル書き換え時に行うことができるようだ。
またテスト結果の通知を Growl で行うことも出来るようだ。</p>

<!-- more -->


<h2>How to setup</h2>

<p>Growl でテスト結果を通知するための gem が幾つか存在するのだが、今日(2012/1/22)
の時点では</p>

<ul>
<li><code>growl</code> は Growl v1.3 に対応していない</li>
<li><a href="https://github.com/scottdavis/growl_notify"><code>growl_notify</code></a> は deprecated</li>
<li><code>ruby_gntp</code> は Growl v1.3 とともに動いた</li>
</ul>


<p>というわけで <code>ruby_gntp</code> が良さそうだった。</p>

<p>Gemfile の :development, :test 周りを以下のように変更する。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spork&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;ruby_gntp&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-spork&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.6&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下を実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>spork --bootstrap
</span></code></pre></td></tr></table></div></figure>


<p><code>spec/spec_helper.rb</code> が spork によって書き換えられているので編集する。
今までのコードを <code>Spork.prefork do … end</code> の中に入れてあげれば OK。
<code>.rspec</code> を編集し、<code>--drb</code> という行を追加する。</p>

<p>ここまでで spork が動作する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>spork
</span><span class='line'><span class="c"># 別のターミナルで</span>
</span><span class='line'><span class="nv">$ </span>rspec .
</span></code></pre></td></tr></table></div></figure>


<p>続いて guard の設定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>guard init spork
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>guard init rspec
</span></code></pre></td></tr></table></div></figure>


<p>これで guard + spork が動作する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>guard start
</span></code></pre></td></tr></table></div></figure>


<p>あとはソースコードを書き換えたら自動でテストが実行され、結果が Growl で通知される。</p>

<p>ようやくテストを書くことが出来る。(実は今まで書いてなかった笑)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying Micro Cloud Foundry 1.1.0 その2]]></title>
    <link href="http://tkawachi.github.com/blog/2012/01/03/trying-micro-cloud-foundry-1-dot-1-0-2/"/>
    <updated>2012-01-03T19:31:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/01/03/trying-micro-cloud-foundry-1-dot-1-0-2</id>
    <content type="html"><![CDATA[<p><a href="http://tkawachi.github.com/blog/2012/01/03/trying-micro-cloud-foundry-1-dot-1-0/">前回</a>
は残念ながらインストールの途中で止まってしまいましたが、解決方法がわかりました。</p>

<p>デフォルトで Bridge network になっているのですが、私の環境
(VMware 4.1.1, Mac OS X Lion, WiFi)では VM で network が利用不可のようです。
昔から無線で Bridge networking はハマることが多いです。
以下の手順で回避できました。
(
<a href="http://support.cloudfoundry.com/entries/20382148-unable-to-cloudfoundry-com">ここ</a>
や
<a href="http://support.cloudfoundry.com/entries/20387172-unable-to-contact-cloudfoundry-com-to-redeem-configuration-token">ここ</a>
を参考にしました。
)</p>

<!-- more -->


<ol>
<li>立ち上げて password 設定、network 設定で DHCP を指定、proxy を none に指定</li>
<li>ここで Alt+F2 を押して別コンソールに移動。<code>root</code> ユーザでログイン。パスワードは前ステップで指定したもの。</li>
<li>VMware の設定で Network Adapter を NAT に設定。</li>
<li><code>/etc/init.d/networking restart</code> を実行。IP が取れることを確認。</li>
<li>Alt+F1 を押して元のコンソールに移動。続きを実行。</li>
</ol>


<p>今度は数分で完了しました。</p>

<p>Network につながらない場合のメッセージを見て、つながらなくても動くと理解しましたが、そうではないようです。</p>

<p>続いては Host から <code>vmc</code> コマンドです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vmc target http://api.kawachi.cloudfoundry.me
</span><span class='line'>Successfully targeted to [http://api.kawachi.cloudfoundry.me]
</span><span class='line'>
</span><span class='line'>$ vmc register
</span><span class='line'>Email: hoho@fufu.com
</span><span class='line'>Password: ******
</span><span class='line'>Verify Password: ******
</span><span class='line'>Creating New User: OK</span></code></pre></td></tr></table></div></figure>


<p><code>api.kawachi.cloudfoundry.me</code> は <code>kawachi.cloudfoundry.me</code> の CNAME で、
<code>kawachi.cloudfoundry.me</code> は VM が持つ IP アドレスになっているようです。</p>

<p>あとは <code>cloudfoundry.com</code> と同様に利用出来るとのこと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying Micro Cloud Foundry 1.1.0]]></title>
    <link href="http://tkawachi.github.com/blog/2012/01/03/trying-micro-cloud-foundry-1-dot-1-0/"/>
    <updated>2012-01-03T14:19:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2012/01/03/trying-micro-cloud-foundry-1-dot-1-0</id>
    <content type="html"><![CDATA[<p>前々から気になっていた Micro Cloud Foundry を試してみます。
Cloud Foundry は VMware 社が開発している open source の PaaS です。
Micro Cloud Foundry は PaaS 環境を VMware の仮想マシンにまとめたものです。</p>

<p>参考にしたのは <a href="http://support.cloudfoundry.com/entries/20316811-micro-cloud-foundry-installation-setup">Micro Cloud Foundry Installation &amp; Setup</a>。</p>

<!-- more -->


<p>まず仮想マシンを <a href="http://www.cloudfoundry.com/">Clound Foundry のページ</a>
からダウンロードします。
1GBあるので結構時間がかかります。
BitTorrent で配布してくれとリクエストをだしておきました。</p>

<p>ダウンロード後、展開して <code>micro.vmx</code> を  VMware Fusion 4.1.1 で開こうとするとエラーになる。
どうやら <code>.vmx</code> が Steinberg VST Mixer Settings に関連付けられていることが問題のようだ。
以前 Cubase というアプリをインストールしたが、それが干渉している模様。
<a href="http://communities.vmware.com/thread/239695">VMware のコミュニティページ</a>
を参考にして <code>micro/</code> ディレクトリを <code>micro.vmwarevm/</code> に改名して
ダブルクリックすることで起動できた。</p>

<p>あとは
<a href="http://support.cloudfoundry.com/entries/20316811-micro-cloud-foundry-installation-setup">参考ページ</a>
通り、、と行きたいところですが問題発生。</p>

<p><code>Enter Micro Cloud Foundry configuration token:</code> と聞かれたところで
自分の token を入力しても
<code>Unable to contact cloudfoundry.com to redeem configuration token</code>
というエラーが表示される。
ネットワークの設定がうまくいっていないのか、はたまた <code>cloudfoundry.com</code> が
ダウンしているのか。
<code>Configure vcap.me instead?</code> と聞かれたのでとりあえず y した。</p>

<pre><code>Micro Cloud Foundry is now bound to localhost (127.0.0.1)
You must use ssh tunneling to access it
Press return to continue 
</code></pre>

<p>と表示された。return を押して続き。</p>

<p>下の画面のとおり「5分かかるよ」と言われた。</p>

<p><img src="https://lh3.googleusercontent.com/-ScF3kpSyiJ0/TwKwn8CpQiI/AAAAAAAAGSM/n1Lcx5EFHw0/s800/Screen%252520Shot%2525202012-01-03%252520at%25252016.30.13.png"></p>

<p>がしかし、待っても待っても返ってこない。1時間以上は待ったが。
どうしたことだろう？</p>

<p>とりあえず今回はここまで。次回はなんとか動かしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile ruby 1.9.3 on Mac OS X Lion using RVM]]></title>
    <link href="http://tkawachi.github.com/blog/2011/12/27/compile-ruby-1-dot-9-3-on-mac-os-x-lion/"/>
    <updated>2011-12-27T23:52:00+09:00</updated>
    <id>http://tkawachi.github.com/blog/2011/12/27/compile-ruby-1-dot-9-3-on-mac-os-x-lion</id>
    <content type="html"><![CDATA[<p>仕事で Ruby を使うことになったので、家の Lion ちゃんにも ruby インストール
しとこうと思ったらエラーになる。
rvm の version は 1.10.0。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 1.9.3
</span><span class='line'>Installing Ruby from source to: /Users/kawachi/.rvm/rubies/ruby-1.9.3-p0, this may take a while depending on your cpu(s)...
</span><span class='line'>
</span><span class='line'>ruby-1.9.3-p0 - #fetching
</span><span class='line'>ruby-1.9.3-p0 - #extracted to /Users/kawachi/.rvm/src/ruby-1.9.3-p0 (already extracted)
</span><span class='line'>Fetching yaml-0.1.4.tar.gz to /Users/kawachi/.rvm/archives
</span><span class='line'>Extracting yaml-0.1.4.tar.gz to /Users/kawachi/.rvm/src
</span><span class='line'>Configuring yaml in /Users/kawachi/.rvm/src/yaml-0.1.4.
</span><span class='line'>Compiling yaml in /Users/kawachi/.rvm/src/yaml-0.1.4.
</span><span class='line'>Installing yaml to /Users/kawachi/.rvm/usr
</span><span class='line'>ruby-1.9.3-p0 - #configuring
</span><span class='line'>ERROR: Error running ' ./configure --prefix=/Users/kawachi/.rvm/rubies/ruby-1.9.3-p0 --enable-shared --disable-install-doc --with-libyaml-dir=/Users/kawachi/.rvm/usr ', please read /Users/kawachi/.rvm/log/ruby-1.9.3-p0/configure.log
</span><span class='line'>ERROR: There has been an error while running configure. Halting the installation.</span></code></pre></td></tr></table></div></figure>


<p><code>~/.rvm/log/ruby-1.9.3-p0/configure.log</code> はこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2011-12-27 23:50:52]  ./configure --prefix=/Users/kawachi/.rvm/rubies/ruby-1.9.3-p0 --enable-shared --disable-install-doc --with-libyaml-dir=/Users/kawachi/.rvm/usr 
</span><span class='line'>configure: WARNING: unrecognized options: --with-libyaml-dir
</span><span class='line'>checking build system type... x86_64-apple-darwin11.2.0
</span><span class='line'>checking host system type... x86_64-apple-darwin11.2.0
</span><span class='line'>checking target system type... x86_64-apple-darwin11.2.0
</span><span class='line'>checking whether the C compiler works... no
</span><span class='line'>configure: error: in `/Users/kawachi/.rvm/src/ruby-1.9.3-p0':
</span><span class='line'>configure: error: C compiler cannot create executablesSee `config.log' for more details</span></code></pre></td></tr></table></div></figure>


<p><code>CC=gcc</code> を指定すると少し変わる。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CC=gcc rvm install 1.9.3
</span><span class='line'>ERROR: The provided CC(gcc) is LLVM based, it is not yet fully supported by ruby and gems, please read `rvm requirements`.</span></code></pre></td></tr></table></div></figure>


<p><code>rvm requirements</code> を読むといろいろ書いてある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Notes for Darwin ( Mac OS X )
</span><span class='line'>    For Snow Leopard: Xcode Version 3.2.1 (1613) or later, such as 3.2.6 or Xcode 4.1.
</span><span class='line'>    [ Please note that Xcode 3.x will *not* work on OS X Lion. The 'cross-over' is Xcode 4.1. ]
</span><span class='line'>
</span><span class='line'>    You should download the Xcode tools from developer.apple.com, since the Snow Leopard dvd install contained bugs.
</span><span class='line'>    You can find Xcode 4.1 for OS X Lion at:
</span><span class='line'>    https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.1_for_lion/xcode_4.1_for_lion.dmg
</span><span class='line'>
</span><span class='line'>    ** Lion Users: Xcode Version 4.2.x for OS X Lion works only for ruby 1.9.3-p0 (or higher).
</span><span class='line'>                   It currently fails to build several other rubies and gems, as well as several Homebrew and
</span><span class='line'>                   Macports packages. Xcode Version 4.1 (4B110) works.
</span><span class='line'>    ** NOTE: Currently, Node.js is having issues building with osx-gcc-installer. This is _not_ an RVM issue. This is
</span><span class='line'>       because Node.js depends on the Carbon headers. ox-gcc-installer does not install these to the system.
</span><span class='line'>       This issue only affects users using osx-gcc-installer, and not Xcode. The only fix is to install Xcode over osx-gcc-installer.
</span><span class='line'>
</span><span class='line'>    For MacRuby: Install LLVM first.
</span><span class='line'>    For JRuby:  Install the JDK. See http://developer.apple.com/java/download/  # Current Java version 1.6.0_26
</span><span class='line'>    For IronRuby: Install Mono &gt;= 2.6
</span><span class='line'>      For Ruby 1.9.3: Install libksba # If using Homebrew, 'brew install libksba'</span></code></pre></td></tr></table></div></figure>


<p>なんかいろいろ書いてある。
自分の環境 (Lion, Xcode 4.2.1) に関連しそうなのは、</p>

<ul>
<li>Lion で Xcode 4.1 だとうまくいく</li>
<li>Lion の Xcode 4.2 でコンパイルできるのは ruby 1.9.3-p0 とそれ以降</li>
<li>Ruby 1.9.3 をインストールする前に libksba をインストールせよ</li>
</ul>


<p>たしかに Xcode 4.2 なので LLVM しかないけど、
ruby 1.9.3-p0 はコンパイルできるんじゃないの？
RVM で止められてる気がする。。。</p>

<p><code>~/.rvm/scripts/functions/build</code> を参照すると、
<code>CC</code> 環境変数が存在するときは <code>--version</code> 付きで実行して LLVM だったら <code>exit 1</code> してる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- .rvm/scripts/functions/build.orig   2011-12-28 00:29:10.000000000 +0900
</span><span class='line'>+++ .rvm/scripts/functions/build        2011-12-28 00:29:32.000000000 +0900
</span><span class='line'>@@ -29,7 +29,7 @@
</span><span class='line'>       else
</span><span class='line'>         rvm_error "The autodetected CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`, and set CC=/path/to/gcc ."
</span><span class='line'>       fi
</span><span class='line'>-      exit 1
</span><span class='line'>+      #exit 1
</span><span class='line'>     fi
</span><span class='line'> 
</span><span class='line'>   fi</span></code></pre></td></tr></table></div></figure>


<p>とりあえず上記のとおりコメントアウトしてみたら
<code>$ CC=gcc rvm install 1.9.3</code> で compile できた。</p>

<p>正しいやり方でないような気はするけど、まいっか。</p>
]]></content>
  </entry>
  
</feed>
